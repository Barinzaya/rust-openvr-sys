#[link(name = "openvr_api")]
extern {}

/* automatically generated by rust-bindgen */

pub type int64_t = ::std::os::raw::c_longlong;
pub type uint64_t = ::std::os::raw::c_ulonglong;
pub type int_least64_t = int64_t;
pub type uint_least64_t = uint64_t;
pub type int_fast64_t = int64_t;
pub type uint_fast64_t = uint64_t;
pub type int32_t = ::std::os::raw::c_int;
pub type uint32_t = ::std::os::raw::c_uint;
pub type int_least32_t = int32_t;
pub type uint_least32_t = uint32_t;
pub type int_fast32_t = int32_t;
pub type uint_fast32_t = uint32_t;
pub type int16_t = ::std::os::raw::c_short;
pub type uint16_t = ::std::os::raw::c_ushort;
pub type int_least16_t = int16_t;
pub type uint_least16_t = uint16_t;
pub type int_fast16_t = int16_t;
pub type uint_fast16_t = uint16_t;
pub type int8_t = ::std::os::raw::c_char;
pub type uint8_t = ::std::os::raw::c_uchar;
pub type int_least8_t = int8_t;
pub type uint_least8_t = uint8_t;
pub type int_fast8_t = int8_t;
pub type uint_fast8_t = uint8_t;
pub type intptr_t = int64_t;
pub type uintptr_t = uint64_t;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_EVREye { EVREye_Eye_Left = 0, EVREye_Eye_Right = 1, }
pub type EVREye = Enum_EVREye;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_EGraphicsAPIConvention {
    EGraphicsAPIConvention_API_DirectX = 0,
    EGraphicsAPIConvention_API_OpenGL = 1,
}
pub type EGraphicsAPIConvention = Enum_EGraphicsAPIConvention;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_EColorSpace {
    EColorSpace_ColorSpace_Auto = 0,
    EColorSpace_ColorSpace_Gamma = 1,
    EColorSpace_ColorSpace_Linear = 2,
}
pub type EColorSpace = Enum_EColorSpace;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_ETrackingResult {
    ETrackingResult_TrackingResult_Uninitialized = 1,
    ETrackingResult_TrackingResult_Calibrating_InProgress = 100,
    ETrackingResult_TrackingResult_Calibrating_OutOfRange = 101,
    ETrackingResult_TrackingResult_Running_OK = 200,
    ETrackingResult_TrackingResult_Running_OutOfRange = 201,
}
pub type ETrackingResult = Enum_ETrackingResult;
#[derive(Clone, Copy, Debug)]
#[repr(u32)]
pub enum Enum_ETrackedDeviceClass {
    ETrackedDeviceClass_TrackedDeviceClass_Invalid = 0,
    ETrackedDeviceClass_TrackedDeviceClass_HMD = 1,
    ETrackedDeviceClass_TrackedDeviceClass_Controller = 2,
    ETrackedDeviceClass_TrackedDeviceClass_TrackingReference = 4,
    ETrackedDeviceClass_TrackedDeviceClass_Other = 1000,
}
pub type ETrackedDeviceClass = Enum_ETrackedDeviceClass;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_ETrackedControllerRole {
    ETrackedControllerRole_TrackedControllerRole_Invalid = 0,
    ETrackedControllerRole_TrackedControllerRole_LeftHand = 1,
    ETrackedControllerRole_TrackedControllerRole_RightHand = 2,
}
pub type ETrackedControllerRole = Enum_ETrackedControllerRole;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_ETrackingUniverseOrigin {
    ETrackingUniverseOrigin_TrackingUniverseSeated = 0,
    ETrackingUniverseOrigin_TrackingUniverseStanding = 1,
    ETrackingUniverseOrigin_TrackingUniverseRawAndUncalibrated = 2,
}
pub type ETrackingUniverseOrigin = Enum_ETrackingUniverseOrigin;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_ETrackedDeviceProperty {
    ETrackedDeviceProperty_Prop_TrackingSystemName_String = 1000,
    ETrackedDeviceProperty_Prop_ModelNumber_String = 1001,
    ETrackedDeviceProperty_Prop_SerialNumber_String = 1002,
    ETrackedDeviceProperty_Prop_RenderModelName_String = 1003,
    ETrackedDeviceProperty_Prop_WillDriftInYaw_Bool = 1004,
    ETrackedDeviceProperty_Prop_ManufacturerName_String = 1005,
    ETrackedDeviceProperty_Prop_TrackingFirmwareVersion_String = 1006,
    ETrackedDeviceProperty_Prop_HardwareRevision_String = 1007,
    ETrackedDeviceProperty_Prop_AllWirelessDongleDescriptions_String = 1008,
    ETrackedDeviceProperty_Prop_ConnectedWirelessDongle_String = 1009,
    ETrackedDeviceProperty_Prop_DeviceIsWireless_Bool = 1010,
    ETrackedDeviceProperty_Prop_DeviceIsCharging_Bool = 1011,
    ETrackedDeviceProperty_Prop_DeviceBatteryPercentage_Float = 1012,
    ETrackedDeviceProperty_Prop_StatusDisplayTransform_Matrix34 = 1013,
    ETrackedDeviceProperty_Prop_Firmware_UpdateAvailable_Bool = 1014,
    ETrackedDeviceProperty_Prop_Firmware_ManualUpdate_Bool = 1015,
    ETrackedDeviceProperty_Prop_Firmware_ManualUpdateURL_String = 1016,
    ETrackedDeviceProperty_Prop_HardwareRevision_Uint64 = 1017,
    ETrackedDeviceProperty_Prop_FirmwareVersion_Uint64 = 1018,
    ETrackedDeviceProperty_Prop_FPGAVersion_Uint64 = 1019,
    ETrackedDeviceProperty_Prop_VRCVersion_Uint64 = 1020,
    ETrackedDeviceProperty_Prop_RadioVersion_Uint64 = 1021,
    ETrackedDeviceProperty_Prop_DongleVersion_Uint64 = 1022,
    ETrackedDeviceProperty_Prop_BlockServerShutdown_Bool = 1023,
    ETrackedDeviceProperty_Prop_CanUnifyCoordinateSystemWithHmd_Bool = 1024,
    ETrackedDeviceProperty_Prop_ContainsProximitySensor_Bool = 1025,
    ETrackedDeviceProperty_Prop_DeviceProvidesBatteryStatus_Bool = 1026,
    ETrackedDeviceProperty_Prop_DeviceCanPowerOff_Bool = 1027,
    ETrackedDeviceProperty_Prop_Firmware_ProgrammingTarget_String = 1028,
    ETrackedDeviceProperty_Prop_DeviceClass_Int32 = 1029,
    ETrackedDeviceProperty_Prop_HasCamera_Bool = 1030,
    ETrackedDeviceProperty_Prop_ReportsTimeSinceVSync_Bool = 2000,
    ETrackedDeviceProperty_Prop_SecondsFromVsyncToPhotons_Float = 2001,
    ETrackedDeviceProperty_Prop_DisplayFrequency_Float = 2002,
    ETrackedDeviceProperty_Prop_UserIpdMeters_Float = 2003,
    ETrackedDeviceProperty_Prop_CurrentUniverseId_Uint64 = 2004,
    ETrackedDeviceProperty_Prop_PreviousUniverseId_Uint64 = 2005,
    ETrackedDeviceProperty_Prop_DisplayFirmwareVersion_Uint64 = 2006,
    ETrackedDeviceProperty_Prop_IsOnDesktop_Bool = 2007,
    ETrackedDeviceProperty_Prop_DisplayMCType_Int32 = 2008,
    ETrackedDeviceProperty_Prop_DisplayMCOffset_Float = 2009,
    ETrackedDeviceProperty_Prop_DisplayMCScale_Float = 2010,
    ETrackedDeviceProperty_Prop_EdidVendorID_Int32 = 2011,
    ETrackedDeviceProperty_Prop_DisplayMCImageLeft_String = 2012,
    ETrackedDeviceProperty_Prop_DisplayMCImageRight_String = 2013,
    ETrackedDeviceProperty_Prop_DisplayGCBlackClamp_Float = 2014,
    ETrackedDeviceProperty_Prop_EdidProductID_Int32 = 2015,
    ETrackedDeviceProperty_Prop_CameraToHeadTransform_Matrix34 = 2016,
    ETrackedDeviceProperty_Prop_DisplayGCType_Int32 = 2017,
    ETrackedDeviceProperty_Prop_DisplayGCOffset_Float = 2018,
    ETrackedDeviceProperty_Prop_DisplayGCScale_Float = 2019,
    ETrackedDeviceProperty_Prop_DisplayGCPrescale_Float = 2020,
    ETrackedDeviceProperty_Prop_DisplayGCImage_String = 2021,
    ETrackedDeviceProperty_Prop_LensCenterLeftU_Float = 2022,
    ETrackedDeviceProperty_Prop_LensCenterLeftV_Float = 2023,
    ETrackedDeviceProperty_Prop_LensCenterRightU_Float = 2024,
    ETrackedDeviceProperty_Prop_LensCenterRightV_Float = 2025,
    ETrackedDeviceProperty_Prop_UserHeadToEyeDepthMeters_Float = 2026,
    ETrackedDeviceProperty_Prop_CameraFirmwareVersion_Uint64 = 2027,
    ETrackedDeviceProperty_Prop_CameraFirmwareDescription_String = 2028,
    ETrackedDeviceProperty_Prop_DisplayFPGAVersion_Uint64 = 2029,
    ETrackedDeviceProperty_Prop_DisplayBootloaderVersion_Uint64 = 2030,
    ETrackedDeviceProperty_Prop_DisplayHardwareVersion_Uint64 = 2031,
    ETrackedDeviceProperty_Prop_AudioFirmwareVersion_Uint64 = 2032,
    ETrackedDeviceProperty_Prop_CameraCompatibilityMode_Int32 = 2033,
    ETrackedDeviceProperty_Prop_AttachedDeviceId_String = 3000,
    ETrackedDeviceProperty_Prop_SupportedButtons_Uint64 = 3001,
    ETrackedDeviceProperty_Prop_Axis0Type_Int32 = 3002,
    ETrackedDeviceProperty_Prop_Axis1Type_Int32 = 3003,
    ETrackedDeviceProperty_Prop_Axis2Type_Int32 = 3004,
    ETrackedDeviceProperty_Prop_Axis3Type_Int32 = 3005,
    ETrackedDeviceProperty_Prop_Axis4Type_Int32 = 3006,
    ETrackedDeviceProperty_Prop_FieldOfViewLeftDegrees_Float = 4000,
    ETrackedDeviceProperty_Prop_FieldOfViewRightDegrees_Float = 4001,
    ETrackedDeviceProperty_Prop_FieldOfViewTopDegrees_Float = 4002,
    ETrackedDeviceProperty_Prop_FieldOfViewBottomDegrees_Float = 4003,
    ETrackedDeviceProperty_Prop_TrackingRangeMinimumMeters_Float = 4004,
    ETrackedDeviceProperty_Prop_TrackingRangeMaximumMeters_Float = 4005,
    ETrackedDeviceProperty_Prop_ModeLabel_String = 4006,
    ETrackedDeviceProperty_Prop_VendorSpecific_Reserved_Start = 10000,
    ETrackedDeviceProperty_Prop_VendorSpecific_Reserved_End = 10999,
}
pub type ETrackedDeviceProperty = Enum_ETrackedDeviceProperty;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_ETrackedPropertyError {
    ETrackedPropertyError_TrackedProp_Success = 0,
    ETrackedPropertyError_TrackedProp_WrongDataType = 1,
    ETrackedPropertyError_TrackedProp_WrongDeviceClass = 2,
    ETrackedPropertyError_TrackedProp_BufferTooSmall = 3,
    ETrackedPropertyError_TrackedProp_UnknownProperty = 4,
    ETrackedPropertyError_TrackedProp_InvalidDevice = 5,
    ETrackedPropertyError_TrackedProp_CouldNotContactServer = 6,
    ETrackedPropertyError_TrackedProp_ValueNotProvidedByDevice = 7,
    ETrackedPropertyError_TrackedProp_StringExceedsMaximumLength = 8,
    ETrackedPropertyError_TrackedProp_NotYetAvailable = 9,
}
pub type ETrackedPropertyError = Enum_ETrackedPropertyError;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_EVRSubmitFlags {
    EVRSubmitFlags_Submit_Default = 0,
    EVRSubmitFlags_Submit_LensDistortionAlreadyApplied = 1,
    EVRSubmitFlags_Submit_GlRenderBuffer = 2,
}
pub type EVRSubmitFlags = Enum_EVRSubmitFlags;
#[derive(Clone, Copy)]
#[repr(i32)]
pub enum Enum_EVRState {
    EVRState_VRState_Undefined = -1,
    EVRState_VRState_Off = 0,
    EVRState_VRState_Searching = 1,
    EVRState_VRState_Searching_Alert = 2,
    EVRState_VRState_Ready = 3,
    EVRState_VRState_Ready_Alert = 4,
    EVRState_VRState_NotReady = 5,
}
pub type EVRState = Enum_EVRState;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_EVREventType {
    EVREventType_VREvent_None = 0,
    EVREventType_VREvent_TrackedDeviceActivated = 100,
    EVREventType_VREvent_TrackedDeviceDeactivated = 101,
    EVREventType_VREvent_TrackedDeviceUpdated = 102,
    EVREventType_VREvent_TrackedDeviceUserInteractionStarted = 103,
    EVREventType_VREvent_TrackedDeviceUserInteractionEnded = 104,
    EVREventType_VREvent_IpdChanged = 105,
    EVREventType_VREvent_EnterStandbyMode = 106,
    EVREventType_VREvent_LeaveStandbyMode = 107,
    EVREventType_VREvent_TrackedDeviceRoleChanged = 108,
    EVREventType_VREvent_ButtonPress = 200,
    EVREventType_VREvent_ButtonUnpress = 201,
    EVREventType_VREvent_ButtonTouch = 202,
    EVREventType_VREvent_ButtonUntouch = 203,
    EVREventType_VREvent_MouseMove = 300,
    EVREventType_VREvent_MouseButtonDown = 301,
    EVREventType_VREvent_MouseButtonUp = 302,
    EVREventType_VREvent_FocusEnter = 303,
    EVREventType_VREvent_FocusLeave = 304,
    EVREventType_VREvent_Scroll = 305,
    EVREventType_VREvent_TouchPadMove = 306,
    EVREventType_VREvent_InputFocusCaptured = 400,
    EVREventType_VREvent_InputFocusReleased = 401,
    EVREventType_VREvent_SceneFocusLost = 402,
    EVREventType_VREvent_SceneFocusGained = 403,
    EVREventType_VREvent_SceneApplicationChanged = 404,
    EVREventType_VREvent_SceneFocusChanged = 405,
    EVREventType_VREvent_HideRenderModels = 410,
    EVREventType_VREvent_ShowRenderModels = 411,
    EVREventType_VREvent_OverlayShown = 500,
    EVREventType_VREvent_OverlayHidden = 501,
    EVREventType_VREvent_DashboardActivated = 502,
    EVREventType_VREvent_DashboardDeactivated = 503,
    EVREventType_VREvent_DashboardThumbSelected = 504,
    EVREventType_VREvent_DashboardRequested = 505,
    EVREventType_VREvent_ResetDashboard = 506,
    EVREventType_VREvent_RenderToast = 507,
    EVREventType_VREvent_ImageLoaded = 508,
    EVREventType_VREvent_ShowKeyboard = 509,
    EVREventType_VREvent_HideKeyboard = 510,
    EVREventType_VREvent_OverlayGamepadFocusGained = 511,
    EVREventType_VREvent_OverlayGamepadFocusLost = 512,
    EVREventType_VREvent_OverlaySharedTextureChanged = 513,
    EVREventType_VREvent_Notification_Shown = 600,
    EVREventType_VREvent_Notification_Hidden = 601,
    EVREventType_VREvent_Notification_BeginInteraction = 602,
    EVREventType_VREvent_Notification_Destroyed = 603,
    EVREventType_VREvent_Quit = 700,
    EVREventType_VREvent_ProcessQuit = 701,
    EVREventType_VREvent_QuitAborted_UserPrompt = 702,
    EVREventType_VREvent_QuitAcknowledged = 703,
    EVREventType_VREvent_ChaperoneDataHasChanged = 800,
    EVREventType_VREvent_ChaperoneUniverseHasChanged = 801,
    EVREventType_VREvent_ChaperoneTempDataHasChanged = 802,
    EVREventType_VREvent_ChaperoneSettingsHaveChanged = 803,
    EVREventType_VREvent_SeatedZeroPoseReset = 804,
    EVREventType_VREvent_BackgroundSettingHasChanged = 850,
    EVREventType_VREvent_CameraSettingsHaveChanged = 851,
    EVREventType_VREvent_StatusUpdate = 900,
    EVREventType_VREvent_MCImageUpdated = 1000,
    EVREventType_VREvent_FirmwareUpdateStarted = 1100,
    EVREventType_VREvent_FirmwareUpdateFinished = 1101,
    EVREventType_VREvent_KeyboardClosed = 1200,
    EVREventType_VREvent_KeyboardCharInput = 1201,
    EVREventType_VREvent_KeyboardDone = 1202,
    EVREventType_VREvent_ApplicationTransitionStarted = 1300,
    EVREventType_VREvent_ApplicationTransitionAborted = 1301,
    EVREventType_VREvent_ApplicationTransitionNewAppStarted = 1302,
    EVREventType_VREvent_Compositor_MirrorWindowShown = 1400,
    EVREventType_VREvent_Compositor_MirrorWindowHidden = 1401,
    EVREventType_VREvent_Compositor_ChaperoneBoundsShown = 1410,
    EVREventType_VREvent_Compositor_ChaperoneBoundsHidden = 1411,
    EVREventType_VREvent_TrackedCamera_StartVideoStream = 1500,
    EVREventType_VREvent_TrackedCamera_StopVideoStream = 1501,
    EVREventType_VREvent_TrackedCamera_PauseVideoStream = 1502,
    EVREventType_VREvent_TrackedCamera_ResumeVideoStream = 1503,
    EVREventType_VREvent_PerformanceTest_EnableCapture = 1600,
    EVREventType_VREvent_PerformanceTest_DisableCapture = 1601,
    EVREventType_VREvent_PerformanceTest_FidelityLevel = 1602,
    EVREventType_VREvent_VendorSpecific_Reserved_Start = 10000,
    EVREventType_VREvent_VendorSpecific_Reserved_End = 19999,
}
pub type EVREventType = Enum_EVREventType;
#[derive(Clone, Copy)]
#[repr(i32)]
pub enum Enum_EDeviceActivityLevel {
    EDeviceActivityLevel_k_EDeviceActivityLevel_Unknown = -1,
    EDeviceActivityLevel_k_EDeviceActivityLevel_Idle = 0,
    EDeviceActivityLevel_k_EDeviceActivityLevel_UserInteraction = 1,
    EDeviceActivityLevel_k_EDeviceActivityLevel_UserInteraction_Timeout = 2,
    EDeviceActivityLevel_k_EDeviceActivityLevel_Standby = 3,
}
pub type EDeviceActivityLevel = Enum_EDeviceActivityLevel;
pub const EVRButtonId_k_EButton_SteamVR_Touchpad: Enum_EVRButtonId =
    Enum_EVRButtonId::EVRButtonId_k_EButton_Axis0;
pub const EVRButtonId_k_EButton_SteamVR_Trigger: Enum_EVRButtonId =
    Enum_EVRButtonId::EVRButtonId_k_EButton_Axis1;
pub const EVRButtonId_k_EButton_Dashboard_Back: Enum_EVRButtonId =
    Enum_EVRButtonId::EVRButtonId_k_EButton_Grip;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_EVRButtonId {
    EVRButtonId_k_EButton_System = 0,
    EVRButtonId_k_EButton_ApplicationMenu = 1,
    EVRButtonId_k_EButton_Grip = 2,
    EVRButtonId_k_EButton_DPad_Left = 3,
    EVRButtonId_k_EButton_DPad_Up = 4,
    EVRButtonId_k_EButton_DPad_Right = 5,
    EVRButtonId_k_EButton_DPad_Down = 6,
    EVRButtonId_k_EButton_A = 7,
    EVRButtonId_k_EButton_Axis0 = 32,
    EVRButtonId_k_EButton_Axis1 = 33,
    EVRButtonId_k_EButton_Axis2 = 34,
    EVRButtonId_k_EButton_Axis3 = 35,
    EVRButtonId_k_EButton_Axis4 = 36,
    EVRButtonId_k_EButton_Max = 64,
}
pub type EVRButtonId = Enum_EVRButtonId;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_EVRMouseButton {
    EVRMouseButton_VRMouseButton_Left = 1,
    EVRMouseButton_VRMouseButton_Right = 2,
    EVRMouseButton_VRMouseButton_Middle = 4,
}
pub type EVRMouseButton = Enum_EVRMouseButton;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_EVRControllerAxisType {
    EVRControllerAxisType_k_eControllerAxis_None = 0,
    EVRControllerAxisType_k_eControllerAxis_TrackPad = 1,
    EVRControllerAxisType_k_eControllerAxis_Joystick = 2,
    EVRControllerAxisType_k_eControllerAxis_Trigger = 3,
}
pub type EVRControllerAxisType = Enum_EVRControllerAxisType;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_EVRControllerEventOutputType {
    EVRControllerEventOutputType_ControllerEventOutput_OSEvents = 0,
    EVRControllerEventOutputType_ControllerEventOutput_VREvents = 1,
}
pub type EVRControllerEventOutputType = Enum_EVRControllerEventOutputType;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_ECollisionBoundsStyle {
    ECollisionBoundsStyle_COLLISION_BOUNDS_STYLE_BEGINNER = 0,
    ECollisionBoundsStyle_COLLISION_BOUNDS_STYLE_INTERMEDIATE = 1,
    ECollisionBoundsStyle_COLLISION_BOUNDS_STYLE_SQUARES = 2,
    ECollisionBoundsStyle_COLLISION_BOUNDS_STYLE_ADVANCED = 3,
    ECollisionBoundsStyle_COLLISION_BOUNDS_STYLE_NONE = 4,
    ECollisionBoundsStyle_COLLISION_BOUNDS_STYLE_COUNT = 5,
}
pub type ECollisionBoundsStyle = Enum_ECollisionBoundsStyle;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_EVROverlayError {
    EVROverlayError_VROverlayError_None = 0,
    EVROverlayError_VROverlayError_UnknownOverlay = 10,
    EVROverlayError_VROverlayError_InvalidHandle = 11,
    EVROverlayError_VROverlayError_PermissionDenied = 12,
    EVROverlayError_VROverlayError_OverlayLimitExceeded = 13,
    EVROverlayError_VROverlayError_WrongVisibilityType = 14,
    EVROverlayError_VROverlayError_KeyTooLong = 15,
    EVROverlayError_VROverlayError_NameTooLong = 16,
    EVROverlayError_VROverlayError_KeyInUse = 17,
    EVROverlayError_VROverlayError_WrongTransformType = 18,
    EVROverlayError_VROverlayError_InvalidTrackedDevice = 19,
    EVROverlayError_VROverlayError_InvalidParameter = 20,
    EVROverlayError_VROverlayError_ThumbnailCantBeDestroyed = 21,
    EVROverlayError_VROverlayError_ArrayTooSmall = 22,
    EVROverlayError_VROverlayError_RequestFailed = 23,
    EVROverlayError_VROverlayError_InvalidTexture = 24,
    EVROverlayError_VROverlayError_UnableToLoadFile = 25,
    EVROverlayError_VROVerlayError_KeyboardAlreadyInUse = 26,
    EVROverlayError_VROverlayError_NoNeighbor = 27,
}
pub type EVROverlayError = Enum_EVROverlayError;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_EVRApplicationType {
    EVRApplicationType_VRApplication_Other = 0,
    EVRApplicationType_VRApplication_Scene = 1,
    EVRApplicationType_VRApplication_Overlay = 2,
    EVRApplicationType_VRApplication_Background = 3,
    EVRApplicationType_VRApplication_Utility = 4,
}
pub type EVRApplicationType = Enum_EVRApplicationType;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_EVRFirmwareError {
    EVRFirmwareError_VRFirmwareError_None = 0,
    EVRFirmwareError_VRFirmwareError_Success = 1,
    EVRFirmwareError_VRFirmwareError_Fail = 2,
}
pub type EVRFirmwareError = Enum_EVRFirmwareError;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_EVRNotificationError {
    EVRNotificationError_VRNotificationError_OK = 0,
    EVRNotificationError_VRNotificationError_InvalidNotificationId = 100,
    EVRNotificationError_VRNotificationError_NotificationQueueFull = 101,
    EVRNotificationError_VRNotificationError_InvalidOverlayHandle = 102,
}
pub type EVRNotificationError = Enum_EVRNotificationError;
#[derive(Clone, Copy, Debug)]
#[repr(u32)]
pub enum Enum_EVRInitError {
    EVRInitError_VRInitError_None = 0,
    EVRInitError_VRInitError_Unknown = 1,
    EVRInitError_VRInitError_Init_InstallationNotFound = 100,
    EVRInitError_VRInitError_Init_InstallationCorrupt = 101,
    EVRInitError_VRInitError_Init_VRClientDLLNotFound = 102,
    EVRInitError_VRInitError_Init_FileNotFound = 103,
    EVRInitError_VRInitError_Init_FactoryNotFound = 104,
    EVRInitError_VRInitError_Init_InterfaceNotFound = 105,
    EVRInitError_VRInitError_Init_InvalidInterface = 106,
    EVRInitError_VRInitError_Init_UserConfigDirectoryInvalid = 107,
    EVRInitError_VRInitError_Init_HmdNotFound = 108,
    EVRInitError_VRInitError_Init_NotInitialized = 109,
    EVRInitError_VRInitError_Init_PathRegistryNotFound = 110,
    EVRInitError_VRInitError_Init_NoConfigPath = 111,
    EVRInitError_VRInitError_Init_NoLogPath = 112,
    EVRInitError_VRInitError_Init_PathRegistryNotWritable = 113,
    EVRInitError_VRInitError_Init_AppInfoInitFailed = 114,
    EVRInitError_VRInitError_Init_Retry = 115,
    EVRInitError_VRInitError_Init_InitCanceledByUser = 116,
    EVRInitError_VRInitError_Init_AnotherAppLaunching = 117,
    EVRInitError_VRInitError_Init_SettingsInitFailed = 118,
    EVRInitError_VRInitError_Init_ShuttingDown = 119,
    EVRInitError_VRInitError_Init_TooManyObjects = 120,
    EVRInitError_VRInitError_Init_NoServerForBackgroundApp = 121,
    EVRInitError_VRInitError_Init_NotSupportedWithCompositor = 122,
    EVRInitError_VRInitError_Init_NotAvailableToUtilityApps = 123,
    EVRInitError_VRInitError_Driver_Failed = 200,
    EVRInitError_VRInitError_Driver_Unknown = 201,
    EVRInitError_VRInitError_Driver_HmdUnknown = 202,
    EVRInitError_VRInitError_Driver_NotLoaded = 203,
    EVRInitError_VRInitError_Driver_RuntimeOutOfDate = 204,
    EVRInitError_VRInitError_Driver_HmdInUse = 205,
    EVRInitError_VRInitError_Driver_NotCalibrated = 206,
    EVRInitError_VRInitError_Driver_CalibrationInvalid = 207,
    EVRInitError_VRInitError_Driver_HmdDisplayNotFound = 208,
    EVRInitError_VRInitError_IPC_ServerInitFailed = 300,
    EVRInitError_VRInitError_IPC_ConnectFailed = 301,
    EVRInitError_VRInitError_IPC_SharedStateInitFailed = 302,
    EVRInitError_VRInitError_IPC_CompositorInitFailed = 303,
    EVRInitError_VRInitError_IPC_MutexInitFailed = 304,
    EVRInitError_VRInitError_IPC_Failed = 305,
    EVRInitError_VRInitError_Compositor_Failed = 400,
    EVRInitError_VRInitError_Compositor_D3D11HardwareRequired = 401,
    EVRInitError_VRInitError_VendorSpecific_UnableToConnectToOculusRuntime =
        1000,
    EVRInitError_VRInitError_VendorSpecific_HmdFound_CantOpenDevice = 1101,
    EVRInitError_VRInitError_VendorSpecific_HmdFound_UnableToRequestConfigStart
        = 1102,
    EVRInitError_VRInitError_VendorSpecific_HmdFound_NoStoredConfig = 1103,
    EVRInitError_VRInitError_VendorSpecific_HmdFound_ConfigTooBig = 1104,
    EVRInitError_VRInitError_VendorSpecific_HmdFound_ConfigTooSmall = 1105,
    EVRInitError_VRInitError_VendorSpecific_HmdFound_UnableToInitZLib = 1106,
    EVRInitError_VRInitError_VendorSpecific_HmdFound_CantReadFirmwareVersion =
        1107,
    EVRInitError_VRInitError_VendorSpecific_HmdFound_UnableToSendUserDataStart
        = 1108,
    EVRInitError_VRInitError_VendorSpecific_HmdFound_UnableToGetUserDataStart
        = 1109,
    EVRInitError_VRInitError_VendorSpecific_HmdFound_UnableToGetUserDataNext =
        1110,
    EVRInitError_VRInitError_VendorSpecific_HmdFound_UserDataAddressRange =
        1111,
    EVRInitError_VRInitError_VendorSpecific_HmdFound_UserDataError = 1112,
    EVRInitError_VRInitError_VendorSpecific_HmdFound_ConfigFailedSanityCheck =
        1113,
    EVRInitError_VRInitError_Steam_SteamInstallationNotFound = 2000,
}
pub type EVRInitError = Enum_EVRInitError;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_EVRApplicationError {
    EVRApplicationError_VRApplicationError_None = 0,
    EVRApplicationError_VRApplicationError_AppKeyAlreadyExists = 100,
    EVRApplicationError_VRApplicationError_NoManifest = 101,
    EVRApplicationError_VRApplicationError_NoApplication = 102,
    EVRApplicationError_VRApplicationError_InvalidIndex = 103,
    EVRApplicationError_VRApplicationError_UnknownApplication = 104,
    EVRApplicationError_VRApplicationError_IPCFailed = 105,
    EVRApplicationError_VRApplicationError_ApplicationAlreadyRunning = 106,
    EVRApplicationError_VRApplicationError_InvalidManifest = 107,
    EVRApplicationError_VRApplicationError_InvalidApplication = 108,
    EVRApplicationError_VRApplicationError_LaunchFailed = 109,
    EVRApplicationError_VRApplicationError_ApplicationAlreadyStarting = 110,
    EVRApplicationError_VRApplicationError_LaunchInProgress = 111,
    EVRApplicationError_VRApplicationError_OldApplicationQuitting = 112,
    EVRApplicationError_VRApplicationError_TransitionAborted = 113,
    EVRApplicationError_VRApplicationError_IsTemplate = 114,
    EVRApplicationError_VRApplicationError_BufferTooSmall = 200,
    EVRApplicationError_VRApplicationError_PropertyNotSet = 201,
    EVRApplicationError_VRApplicationError_UnknownProperty = 202,
}
pub type EVRApplicationError = Enum_EVRApplicationError;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_EVRApplicationProperty {
    EVRApplicationProperty_VRApplicationProperty_Name_String = 0,
    EVRApplicationProperty_VRApplicationProperty_LaunchType_String = 11,
    EVRApplicationProperty_VRApplicationProperty_WorkingDirectory_String = 12,
    EVRApplicationProperty_VRApplicationProperty_BinaryPath_String = 13,
    EVRApplicationProperty_VRApplicationProperty_Arguments_String = 14,
    EVRApplicationProperty_VRApplicationProperty_URL_String = 15,
    EVRApplicationProperty_VRApplicationProperty_Description_String = 50,
    EVRApplicationProperty_VRApplicationProperty_NewsURL_String = 51,
    EVRApplicationProperty_VRApplicationProperty_ImagePath_String = 52,
    EVRApplicationProperty_VRApplicationProperty_Source_String = 53,
    EVRApplicationProperty_VRApplicationProperty_IsDashboardOverlay_Bool = 60,
    EVRApplicationProperty_VRApplicationProperty_IsTemplate_Bool = 61,
    EVRApplicationProperty_VRApplicationProperty_IsInstanced_Bool = 62,
    EVRApplicationProperty_VRApplicationProperty_LastLaunchTime_Uint64 = 70,
}
pub type EVRApplicationProperty = Enum_EVRApplicationProperty;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_EVRApplicationTransitionState {
    EVRApplicationTransitionState_VRApplicationTransition_None = 0,
    EVRApplicationTransitionState_VRApplicationTransition_OldAppQuitSent = 10,
    EVRApplicationTransitionState_VRApplicationTransition_WaitingForExternalLaunch
        = 11,
    EVRApplicationTransitionState_VRApplicationTransition_NewAppLaunched = 20,
}
pub type EVRApplicationTransitionState = Enum_EVRApplicationTransitionState;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_ChaperoneCalibrationState {
    ChaperoneCalibrationState_OK = 1,
    ChaperoneCalibrationState_Warning = 100,
    ChaperoneCalibrationState_Warning_BaseStationMayHaveMoved = 101,
    ChaperoneCalibrationState_Warning_BaseStationRemoved = 102,
    ChaperoneCalibrationState_Warning_SeatedBoundsInvalid = 103,
    ChaperoneCalibrationState_Error = 200,
    ChaperoneCalibrationState_Error_BaseStationUninitalized = 201,
    ChaperoneCalibrationState_Error_BaseStationConflict = 202,
    ChaperoneCalibrationState_Error_PlayAreaInvalid = 203,
    ChaperoneCalibrationState_Error_CollisionBoundsInvalid = 204,
}
pub type ChaperoneCalibrationState = Enum_ChaperoneCalibrationState;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_EChaperoneConfigFile {
    EChaperoneConfigFile_Live = 1,
    EChaperoneConfigFile_Temp = 2,
}
pub type EChaperoneConfigFile = Enum_EChaperoneConfigFile;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_EChaperoneImportFlags {
    EChaperoneImportFlags_EChaperoneImport_BoundsOnly = 1,
}
pub type EChaperoneImportFlags = Enum_EChaperoneImportFlags;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_EVRCompositorError {
    EVRCompositorError_VRCompositorError_None = 0,
    EVRCompositorError_VRCompositorError_IncompatibleVersion = 100,
    EVRCompositorError_VRCompositorError_DoNotHaveFocus = 101,
    EVRCompositorError_VRCompositorError_InvalidTexture = 102,
    EVRCompositorError_VRCompositorError_IsNotSceneApplication = 103,
    EVRCompositorError_VRCompositorError_TextureIsOnWrongDevice = 104,
    EVRCompositorError_VRCompositorError_TextureUsesUnsupportedFormat = 105,
    EVRCompositorError_VRCompositorError_SharedTexturesNotSupported = 106,
    EVRCompositorError_VRCompositorError_IndexOutOfRange = 107,
}
pub type EVRCompositorError = Enum_EVRCompositorError;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_VROverlayInputMethod {
    VROverlayInputMethod_None = 0,
    VROverlayInputMethod_Mouse = 1,
}
pub type VROverlayInputMethod = Enum_VROverlayInputMethod;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_VROverlayTransformType {
    VROverlayTransformType_VROverlayTransform_Absolute = 0,
    VROverlayTransformType_VROverlayTransform_TrackedDeviceRelative = 1,
    VROverlayTransformType_VROverlayTransform_SystemOverlay = 2,
    VROverlayTransformType_VROverlayTransform_TrackedComponent = 3,
}
pub type VROverlayTransformType = Enum_VROverlayTransformType;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_VROverlayFlags {
    VROverlayFlags_None = 0,
    VROverlayFlags_Curved = 1,
    VROverlayFlags_RGSS4X = 2,
    VROverlayFlags_NoDashboardTab = 3,
    VROverlayFlags_AcceptsGamepadEvents = 4,
    VROverlayFlags_ShowGamepadFocus = 5,
    VROverlayFlags_SendVRScrollEvents = 6,
    VROverlayFlags_SendVRTouchpadEvents = 7,
    VROverlayFlags_ShowTouchPadScrollWheel = 8,
}
pub type VROverlayFlags = Enum_VROverlayFlags;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_EGamepadTextInputMode {
    EGamepadTextInputMode_k_EGamepadTextInputModeNormal = 0,
    EGamepadTextInputMode_k_EGamepadTextInputModePassword = 1,
    EGamepadTextInputMode_k_EGamepadTextInputModeSubmit = 2,
}
pub type EGamepadTextInputMode = Enum_EGamepadTextInputMode;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_EGamepadTextInputLineMode {
    EGamepadTextInputLineMode_k_EGamepadTextInputLineModeSingleLine = 0,
    EGamepadTextInputLineMode_k_EGamepadTextInputLineModeMultipleLines = 1,
}
pub type EGamepadTextInputLineMode = Enum_EGamepadTextInputLineMode;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_EOverlayDirection {
    EOverlayDirection_OverlayDirection_Up = 0,
    EOverlayDirection_OverlayDirection_Down = 1,
    EOverlayDirection_OverlayDirection_Left = 2,
    EOverlayDirection_OverlayDirection_Right = 3,
    EOverlayDirection_OverlayDirection_Count = 4,
}
pub type EOverlayDirection = Enum_EOverlayDirection;
#[derive(Clone, Copy, Debug)]
#[repr(u32)]
pub enum Enum_EVRRenderModelError {
    EVRRenderModelError_VRRenderModelError_None = 0,
    EVRRenderModelError_VRRenderModelError_Loading = 100,
    EVRRenderModelError_VRRenderModelError_NotSupported = 200,
    EVRRenderModelError_VRRenderModelError_InvalidArg = 300,
    EVRRenderModelError_VRRenderModelError_InvalidModel = 301,
    EVRRenderModelError_VRRenderModelError_NoShapes = 302,
    EVRRenderModelError_VRRenderModelError_MultipleShapes = 303,
    EVRRenderModelError_VRRenderModelError_TooManyIndices = 304,
    EVRRenderModelError_VRRenderModelError_MultipleTextures = 305,
    EVRRenderModelError_VRRenderModelError_InvalidTexture = 400,
}
pub type EVRRenderModelError = Enum_EVRRenderModelError;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_EVRComponentProperty {
    EVRComponentProperty_VRComponentProperty_IsStatic = 1,
    EVRComponentProperty_VRComponentProperty_IsVisible = 2,
    EVRComponentProperty_VRComponentProperty_IsTouched = 4,
    EVRComponentProperty_VRComponentProperty_IsPressed = 8,
    EVRComponentProperty_VRComponentProperty_IsScrolled = 16,
}
pub type EVRComponentProperty = Enum_EVRComponentProperty;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_EVRNotificationType {
    EVRNotificationType_Transient = 0,
    EVRNotificationType_Persistent = 1,
}
pub type EVRNotificationType = Enum_EVRNotificationType;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_EVRNotificationStyle {
    EVRNotificationStyle_None = 0,
    EVRNotificationStyle_Application = 100,
    EVRNotificationStyle_Contact_Disabled = 200,
    EVRNotificationStyle_Contact_Enabled = 201,
    EVRNotificationStyle_Contact_Active = 202,
}
pub type EVRNotificationStyle = Enum_EVRNotificationStyle;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_EVRSettingsError {
    EVRSettingsError_VRSettingsError_None = 0,
    EVRSettingsError_VRSettingsError_IPCFailed = 1,
    EVRSettingsError_VRSettingsError_WriteFailed = 2,
    EVRSettingsError_VRSettingsError_ReadFailed = 3,
}
pub type EVRSettingsError = Enum_EVRSettingsError;
pub type TrackedDeviceIndex_t = uint32_t;
pub type VRNotificationId = uint32_t;
pub type VROverlayHandle_t = uint64_t;
pub type glSharedTextureHandle_t = *mut ::std::os::raw::c_void;
pub type glInt_t = int32_t;
pub type glUInt_t = uint32_t;
pub type VRComponentProperties = uint32_t;
pub type TextureID_t = int32_t;
pub type HmdError = EVRInitError;
pub type Hmd_Eye = EVREye;
pub type GraphicsAPIConvention = EGraphicsAPIConvention;
pub type ColorSpace = EColorSpace;
pub type HmdTrackingResult = ETrackingResult;
pub type TrackedDeviceClass = ETrackedDeviceClass;
pub type TrackingUniverseOrigin = ETrackingUniverseOrigin;
pub type TrackedDeviceProperty = ETrackedDeviceProperty;
pub type TrackedPropertyError = ETrackedPropertyError;
pub type VRSubmitFlags_t = EVRSubmitFlags;
pub type VRState_t = EVRState;
pub type CollisionBoundsStyle_t = ECollisionBoundsStyle;
pub type VROverlayError = EVROverlayError;
pub type VRFirmwareError = EVRFirmwareError;
pub type VRCompositorError = EVRCompositorError;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_HmdMatrix34_t {
    pub m: [[::std::os::raw::c_float; 4usize]; 3usize],
}
impl ::std::clone::Clone for Struct_HmdMatrix34_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_HmdMatrix34_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HmdMatrix34_t = Struct_HmdMatrix34_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_HmdMatrix44_t {
    pub m: [[::std::os::raw::c_float; 4usize]; 4usize],
}
impl ::std::clone::Clone for Struct_HmdMatrix44_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_HmdMatrix44_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HmdMatrix44_t = Struct_HmdMatrix44_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_HmdVector3_t {
    pub v: [::std::os::raw::c_float; 3usize],
}
impl ::std::clone::Clone for Struct_HmdVector3_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_HmdVector3_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HmdVector3_t = Struct_HmdVector3_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_HmdVector4_t {
    pub v: [::std::os::raw::c_float; 4usize],
}
impl ::std::clone::Clone for Struct_HmdVector4_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_HmdVector4_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HmdVector4_t = Struct_HmdVector4_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_HmdVector3d_t {
    pub v: [::std::os::raw::c_double; 3usize],
}
impl ::std::clone::Clone for Struct_HmdVector3d_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_HmdVector3d_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HmdVector3d_t = Struct_HmdVector3d_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_HmdVector2_t {
    pub v: [::std::os::raw::c_float; 2usize],
}
impl ::std::clone::Clone for Struct_HmdVector2_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_HmdVector2_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HmdVector2_t = Struct_HmdVector2_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_HmdQuaternion_t {
    pub w: ::std::os::raw::c_double,
    pub x: ::std::os::raw::c_double,
    pub y: ::std::os::raw::c_double,
    pub z: ::std::os::raw::c_double,
}
impl ::std::clone::Clone for Struct_HmdQuaternion_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_HmdQuaternion_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HmdQuaternion_t = Struct_HmdQuaternion_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_HmdColor_t {
    pub r: ::std::os::raw::c_float,
    pub g: ::std::os::raw::c_float,
    pub b: ::std::os::raw::c_float,
    pub a: ::std::os::raw::c_float,
}
impl ::std::clone::Clone for Struct_HmdColor_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_HmdColor_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HmdColor_t = Struct_HmdColor_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_HmdQuad_t {
    pub vCorners: [Struct_HmdVector3_t; 4usize],
}
impl ::std::clone::Clone for Struct_HmdQuad_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_HmdQuad_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HmdQuad_t = Struct_HmdQuad_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_HmdRect2_t {
    pub vTopLeft: Struct_HmdVector2_t,
    pub vBottomRight: Struct_HmdVector2_t,
}
impl ::std::clone::Clone for Struct_HmdRect2_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_HmdRect2_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HmdRect2_t = Struct_HmdRect2_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_DistortionCoordinates_t {
    pub rfRed: [::std::os::raw::c_float; 2usize],
    pub rfGreen: [::std::os::raw::c_float; 2usize],
    pub rfBlue: [::std::os::raw::c_float; 2usize],
}
impl ::std::clone::Clone for Struct_DistortionCoordinates_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_DistortionCoordinates_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type DistortionCoordinates_t = Struct_DistortionCoordinates_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Texture_t {
    pub handle: *mut ::std::os::raw::c_void,
    pub eType: Enum_EGraphicsAPIConvention,
    pub eColorSpace: Enum_EColorSpace,
}
impl ::std::clone::Clone for Struct_Texture_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Texture_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Texture_t = Struct_Texture_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_TrackedDevicePose_t {
    pub mDeviceToAbsoluteTracking: Struct_HmdMatrix34_t,
    pub vVelocity: Struct_HmdVector3_t,
    pub vAngularVelocity: Struct_HmdVector3_t,
    pub eTrackingResult: Enum_ETrackingResult,
    pub bPoseIsValid: u8,
    pub bDeviceIsConnected: u8,
}
impl ::std::clone::Clone for Struct_TrackedDevicePose_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_TrackedDevicePose_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TrackedDevicePose_t = Struct_TrackedDevicePose_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VRTextureBounds_t {
    pub uMin: ::std::os::raw::c_float,
    pub vMin: ::std::os::raw::c_float,
    pub uMax: ::std::os::raw::c_float,
    pub vMax: ::std::os::raw::c_float,
}
impl ::std::clone::Clone for Struct_VRTextureBounds_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VRTextureBounds_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VRTextureBounds_t = Struct_VRTextureBounds_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VREvent_Controller_t {
    pub button: uint32_t,
}
impl ::std::clone::Clone for Struct_VREvent_Controller_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VREvent_Controller_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VREvent_Controller_t = Struct_VREvent_Controller_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VREvent_Mouse_t {
    pub x: ::std::os::raw::c_float,
    pub y: ::std::os::raw::c_float,
    pub button: uint32_t,
}
impl ::std::clone::Clone for Struct_VREvent_Mouse_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VREvent_Mouse_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VREvent_Mouse_t = Struct_VREvent_Mouse_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VREvent_Scroll_t {
    pub xdelta: ::std::os::raw::c_float,
    pub ydelta: ::std::os::raw::c_float,
    pub repeatCount: uint32_t,
}
impl ::std::clone::Clone for Struct_VREvent_Scroll_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VREvent_Scroll_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VREvent_Scroll_t = Struct_VREvent_Scroll_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VREvent_TouchPadMove_t {
    pub bFingerDown: u8,
    pub flSecondsFingerDown: ::std::os::raw::c_float,
    pub fValueXFirst: ::std::os::raw::c_float,
    pub fValueYFirst: ::std::os::raw::c_float,
    pub fValueXRaw: ::std::os::raw::c_float,
    pub fValueYRaw: ::std::os::raw::c_float,
}
impl ::std::clone::Clone for Struct_VREvent_TouchPadMove_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VREvent_TouchPadMove_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VREvent_TouchPadMove_t = Struct_VREvent_TouchPadMove_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VREvent_Notification_t {
    pub ulUserValue: uint64_t,
    pub notificationId: uint32_t,
}
impl ::std::clone::Clone for Struct_VREvent_Notification_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VREvent_Notification_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VREvent_Notification_t = Struct_VREvent_Notification_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VREvent_Process_t {
    pub pid: uint32_t,
    pub oldPid: uint32_t,
    pub bForced: u8,
}
impl ::std::clone::Clone for Struct_VREvent_Process_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VREvent_Process_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VREvent_Process_t = Struct_VREvent_Process_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VREvent_Overlay_t {
    pub overlayHandle: uint64_t,
}
impl ::std::clone::Clone for Struct_VREvent_Overlay_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VREvent_Overlay_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VREvent_Overlay_t = Struct_VREvent_Overlay_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VREvent_Status_t {
    pub statusState: uint32_t,
}
impl ::std::clone::Clone for Struct_VREvent_Status_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VREvent_Status_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VREvent_Status_t = Struct_VREvent_Status_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VREvent_Keyboard_t {
    pub cNewInput: [*mut ::std::os::raw::c_char; 8usize],
    pub uUserValue: uint64_t,
}
impl ::std::clone::Clone for Struct_VREvent_Keyboard_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VREvent_Keyboard_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VREvent_Keyboard_t = Struct_VREvent_Keyboard_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VREvent_Ipd_t {
    pub ipdMeters: ::std::os::raw::c_float,
}
impl ::std::clone::Clone for Struct_VREvent_Ipd_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VREvent_Ipd_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VREvent_Ipd_t = Struct_VREvent_Ipd_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VREvent_Chaperone_t {
    pub m_nPreviousUniverse: uint64_t,
    pub m_nCurrentUniverse: uint64_t,
}
impl ::std::clone::Clone for Struct_VREvent_Chaperone_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VREvent_Chaperone_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VREvent_Chaperone_t = Struct_VREvent_Chaperone_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VREvent_Reserved_t {
    pub reserved0: uint64_t,
    pub reserved1: uint64_t,
}
impl ::std::clone::Clone for Struct_VREvent_Reserved_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VREvent_Reserved_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VREvent_Reserved_t = Struct_VREvent_Reserved_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VREvent_PerformanceTest_t {
    pub m_nFidelityLevel: uint32_t,
}
impl ::std::clone::Clone for Struct_VREvent_PerformanceTest_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VREvent_PerformanceTest_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VREvent_PerformanceTest_t = Struct_VREvent_PerformanceTest_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VREvent_SeatedZeroPoseReset_t {
    pub bResetBySystemMenu: u8,
}
impl ::std::clone::Clone for Struct_VREvent_SeatedZeroPoseReset_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VREvent_SeatedZeroPoseReset_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VREvent_SeatedZeroPoseReset_t = Struct_VREvent_SeatedZeroPoseReset_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_HiddenAreaMesh_t {
    pub pVertexData: *mut Struct_HmdVector2_t,
    pub unTriangleCount: uint32_t,
}
impl ::std::clone::Clone for Struct_HiddenAreaMesh_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_HiddenAreaMesh_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HiddenAreaMesh_t = Struct_HiddenAreaMesh_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VRControllerAxis_t {
    pub x: ::std::os::raw::c_float,
    pub y: ::std::os::raw::c_float,
}
impl ::std::clone::Clone for Struct_VRControllerAxis_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VRControllerAxis_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VRControllerAxis_t = Struct_VRControllerAxis_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VRControllerState_t {
    pub unPacketNum: uint32_t,
    pub ulButtonPressed: uint64_t,
    pub ulButtonTouched: uint64_t,
    pub rAxis: [Struct_VRControllerAxis_t; 5usize],
}
impl ::std::clone::Clone for Struct_VRControllerState_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VRControllerState_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VRControllerState_t = Struct_VRControllerState_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Compositor_OverlaySettings {
    pub size: uint32_t,
    pub curved: u8,
    pub antialias: u8,
    pub scale: ::std::os::raw::c_float,
    pub distance: ::std::os::raw::c_float,
    pub alpha: ::std::os::raw::c_float,
    pub uOffset: ::std::os::raw::c_float,
    pub vOffset: ::std::os::raw::c_float,
    pub uScale: ::std::os::raw::c_float,
    pub vScale: ::std::os::raw::c_float,
    pub gridDivs: ::std::os::raw::c_float,
    pub gridWidth: ::std::os::raw::c_float,
    pub gridScale: ::std::os::raw::c_float,
    pub transform: Struct_HmdMatrix44_t,
}
impl ::std::clone::Clone for Struct_Compositor_OverlaySettings {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Compositor_OverlaySettings {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Compositor_OverlaySettings = Struct_Compositor_OverlaySettings;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AppOverrideKeys_t {
    pub pchKey: *mut ::std::os::raw::c_char,
    pub pchValue: *mut ::std::os::raw::c_char,
}
impl ::std::clone::Clone for Struct_AppOverrideKeys_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AppOverrideKeys_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AppOverrideKeys_t = Struct_AppOverrideKeys_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Compositor_FrameTiming {
    pub m_nSize: uint32_t,
    pub m_nFrameIndex: uint32_t,
    pub m_nNumFramePresents: uint32_t,
    pub m_nNumDroppedFrames: uint32_t,
    pub m_flSystemTimeInSeconds: ::std::os::raw::c_double,
    pub m_flSceneRenderGpuMs: ::std::os::raw::c_float,
    pub m_flTotalRenderGpuMs: ::std::os::raw::c_float,
    pub m_flCompositorRenderGpuMs: ::std::os::raw::c_float,
    pub m_flCompositorRenderCpuMs: ::std::os::raw::c_float,
    pub m_flCompositorIdleCpuMs: ::std::os::raw::c_float,
    pub m_flClientFrameIntervalMs: ::std::os::raw::c_float,
    pub m_flPresentCallCpuMs: ::std::os::raw::c_float,
    pub m_flWaitForPresentCpuMs: ::std::os::raw::c_float,
    pub m_flSubmitFrameMs: ::std::os::raw::c_float,
    pub m_flWaitGetPosesCalledMs: ::std::os::raw::c_float,
    pub m_flNewPosesReadyMs: ::std::os::raw::c_float,
    pub m_flNewFrameReadyMs: ::std::os::raw::c_float,
    pub m_flCompositorUpdateStartMs: ::std::os::raw::c_float,
    pub m_flCompositorUpdateEndMs: ::std::os::raw::c_float,
    pub m_flCompositorRenderStartMs: ::std::os::raw::c_float,
    pub m_HmdPose: TrackedDevicePose_t,
    pub m_nFidelityLevel: int32_t,
}
impl ::std::clone::Clone for Struct_Compositor_FrameTiming {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Compositor_FrameTiming {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Compositor_FrameTiming = Struct_Compositor_FrameTiming;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VROverlayIntersectionParams_t {
    pub vSource: Struct_HmdVector3_t,
    pub vDirection: Struct_HmdVector3_t,
    pub eOrigin: Enum_ETrackingUniverseOrigin,
}
impl ::std::clone::Clone for Struct_VROverlayIntersectionParams_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VROverlayIntersectionParams_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VROverlayIntersectionParams_t = Struct_VROverlayIntersectionParams_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VROverlayIntersectionResults_t {
    pub vPoint: Struct_HmdVector3_t,
    pub vNormal: Struct_HmdVector3_t,
    pub vUVs: Struct_HmdVector2_t,
    pub fDistance: ::std::os::raw::c_float,
}
impl ::std::clone::Clone for Struct_VROverlayIntersectionResults_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VROverlayIntersectionResults_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VROverlayIntersectionResults_t =
    Struct_VROverlayIntersectionResults_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_RenderModel_ComponentState_t {
    pub mTrackingToComponentRenderModel: Struct_HmdMatrix34_t,
    pub mTrackingToComponentLocal: Struct_HmdMatrix34_t,
    pub uProperties: VRComponentProperties,
}
impl ::std::clone::Clone for Struct_RenderModel_ComponentState_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_RenderModel_ComponentState_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type RenderModel_ComponentState_t = Struct_RenderModel_ComponentState_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_RenderModel_Vertex_t {
    pub vPosition: Struct_HmdVector3_t,
    pub vNormal: Struct_HmdVector3_t,
    pub rfTextureCoord: [::std::os::raw::c_float; 2usize],
}
impl ::std::clone::Clone for Struct_RenderModel_Vertex_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_RenderModel_Vertex_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type RenderModel_Vertex_t = Struct_RenderModel_Vertex_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_RenderModel_TextureMap_t {
    pub unWidth: uint16_t,
    pub unHeight: uint16_t,
    pub rubTextureMapData: *mut uint8_t,
}
impl ::std::clone::Clone for Struct_RenderModel_TextureMap_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_RenderModel_TextureMap_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type RenderModel_TextureMap_t = Struct_RenderModel_TextureMap_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_RenderModel_t {
    pub rVertexData: *mut Struct_RenderModel_Vertex_t,
    pub unVertexCount: uint32_t,
    pub rIndexData: *mut uint16_t,
    pub unTriangleCount: uint32_t,
    pub diffuseTextureId: TextureID_t,
}
impl ::std::clone::Clone for Struct_RenderModel_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_RenderModel_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type RenderModel_t = Struct_RenderModel_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_RenderModel_ControllerMode_State_t {
    pub bScrollWheelVisible: u8,
}
impl ::std::clone::Clone for Struct_RenderModel_ControllerMode_State_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_RenderModel_ControllerMode_State_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type RenderModel_ControllerMode_State_t =
    Struct_RenderModel_ControllerMode_State_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_NotificationBitmap_t {
    pub bytes: *mut ::std::os::raw::c_void,
    pub width: int32_t,
    pub height: int32_t,
    pub depth: int32_t,
}
impl ::std::clone::Clone for Struct_NotificationBitmap_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_NotificationBitmap_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type NotificationBitmap_t = Struct_NotificationBitmap_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_COpenVRContext {
    pub m_pVRSystem: intptr_t,
    pub m_pVRChaperone: intptr_t,
    pub m_pVRChaperoneSetup: intptr_t,
    pub m_pVRCompositor: intptr_t,
    pub m_pVROverlay: intptr_t,
    pub m_pVRRenderModels: intptr_t,
    pub m_pVRExtendedDisplay: intptr_t,
    pub m_pVRSettings: intptr_t,
    pub m_pVRApplications: intptr_t,
}
impl ::std::clone::Clone for Struct_COpenVRContext {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_COpenVRContext {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type COpenVRContext = Struct_COpenVRContext;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed1 {
    pub _bindgen_data_: [u64; 9usize],
}
impl Union_Unnamed1 {
    pub unsafe fn reserved(&mut self) -> *mut VREvent_Reserved_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn controller(&mut self) -> *mut VREvent_Controller_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn mouse(&mut self) -> *mut VREvent_Mouse_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn scroll(&mut self) -> *mut VREvent_Scroll_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn process(&mut self) -> *mut VREvent_Process_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn notification(&mut self) -> *mut VREvent_Notification_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn overlay(&mut self) -> *mut VREvent_Overlay_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn status(&mut self) -> *mut VREvent_Status_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn keyboard(&mut self) -> *mut VREvent_Keyboard_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ipd(&mut self) -> *mut VREvent_Ipd_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn chaperone(&mut self) -> *mut VREvent_Chaperone_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn performanceTest(&mut self)
     -> *mut VREvent_PerformanceTest_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn touchPadMove(&mut self) -> *mut VREvent_TouchPadMove_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn seatedZeroPoseReset(&mut self)
     -> *mut VREvent_SeatedZeroPoseReset_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VREvent_Data_t = Union_Unnamed1;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VREvent_t {
    pub eventType: uint32_t,
    pub trackedDeviceIndex: TrackedDeviceIndex_t,
    pub eventAgeSeconds: ::std::os::raw::c_float,
    pub data: VREvent_Data_t,
}
impl ::std::clone::Clone for Struct_VREvent_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VREvent_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VR_IVRSystem_FnTable {
    pub GetRecommendedRenderTargetSize: ::std::option::Option<unsafe extern "C" fn(pnWidth:
                                                                                       *mut uint32_t,
                                                                                   pnHeight:
                                                                                       *mut uint32_t)>,
    pub GetProjectionMatrix: ::std::option::Option<extern "C" fn(eEye: EVREye,
                                                                 fNearZ:
                                                                     ::std::os::raw::c_float,
                                                                 fFarZ:
                                                                     ::std::os::raw::c_float,
                                                                 eProjType:
                                                                     EGraphicsAPIConvention)
                                                       ->
                                                           Struct_HmdMatrix44_t>,
    pub GetProjectionRaw: ::std::option::Option<unsafe extern "C" fn(eEye:
                                                                         EVREye,
                                                                     pfLeft:
                                                                         *mut ::std::os::raw::c_float,
                                                                     pfRight:
                                                                         *mut ::std::os::raw::c_float,
                                                                     pfTop:
                                                                         *mut ::std::os::raw::c_float,
                                                                     pfBottom:
                                                                         *mut ::std::os::raw::c_float)>,
    pub ComputeDistortion: ::std::option::Option<extern "C" fn(eEye: EVREye,
                                                               fU:
                                                                   ::std::os::raw::c_float,
                                                               fV:
                                                                   ::std::os::raw::c_float)
                                                     ->
                                                         Struct_DistortionCoordinates_t>,
    pub GetEyeToHeadTransform: ::std::option::Option<extern "C" fn(eEye:
                                                                       EVREye)
                                                         ->
                                                             Struct_HmdMatrix34_t>,
    pub GetTimeSinceLastVsync: ::std::option::Option<unsafe extern "C" fn(pfSecondsSinceLastVsync:
                                                                              *mut ::std::os::raw::c_float,
                                                                          pulFrameCounter:
                                                                              *mut uint64_t)
                                                         -> u8>,
    pub GetD3D9AdapterIndex: ::std::option::Option<extern "C" fn()
                                                       -> int32_t>,
    pub GetDXGIOutputInfo: ::std::option::Option<unsafe extern "C" fn(pnAdapterIndex:
                                                                          *mut int32_t)>,
    pub IsDisplayOnDesktop: ::std::option::Option<extern "C" fn() -> u8>,
    pub SetDisplayVisibility: ::std::option::Option<extern "C" fn(bIsVisibleOnDesktop:
                                                                      u8)
                                                        -> u8>,
    pub GetDeviceToAbsoluteTrackingPose: ::std::option::Option<unsafe extern "C" fn(eOrigin:
                                                                                        ETrackingUniverseOrigin,
                                                                                    fPredictedSecondsToPhotonsFromNow:
                                                                                        ::std::os::raw::c_float,
                                                                                    pTrackedDevicePoseArray:
                                                                                        *mut Struct_TrackedDevicePose_t,
                                                                                    unTrackedDevicePoseArrayCount:
                                                                                        uint32_t)>,
    pub ResetSeatedZeroPose: ::std::option::Option<extern "C" fn()>,
    pub GetSeatedZeroPoseToStandingAbsoluteTrackingPose: ::std::option::Option<extern "C" fn()
                                                                                   ->
                                                                                       Struct_HmdMatrix34_t>,
    pub GetRawZeroPoseToStandingAbsoluteTrackingPose: ::std::option::Option<extern "C" fn()
                                                                                ->
                                                                                    Struct_HmdMatrix34_t>,
    pub GetSortedTrackedDeviceIndicesOfClass: ::std::option::Option<unsafe extern "C" fn(eTrackedDeviceClass:
                                                                                             ETrackedDeviceClass,
                                                                                         punTrackedDeviceIndexArray:
                                                                                             *mut TrackedDeviceIndex_t,
                                                                                         unTrackedDeviceIndexArrayCount:
                                                                                             uint32_t,
                                                                                         unRelativeToTrackedDeviceIndex:
                                                                                             TrackedDeviceIndex_t)
                                                                        ->
                                                                            uint32_t>,
    pub GetTrackedDeviceActivityLevel: ::std::option::Option<extern "C" fn(unDeviceId:
                                                                               TrackedDeviceIndex_t)
                                                                 ->
                                                                     EDeviceActivityLevel>,
    pub ApplyTransform: ::std::option::Option<unsafe extern "C" fn(pOutputPose:
                                                                       *mut Struct_TrackedDevicePose_t,
                                                                   pTrackedDevicePose:
                                                                       *mut Struct_TrackedDevicePose_t,
                                                                   pTransform:
                                                                       *mut Struct_HmdMatrix34_t)>,
    pub GetTrackedDeviceIndexForControllerRole: ::std::option::Option<extern "C" fn(unDeviceType:
                                                                                        ETrackedControllerRole)
                                                                          ->
                                                                              TrackedDeviceIndex_t>,
    pub GetControllerRoleForTrackedDeviceIndex: ::std::option::Option<extern "C" fn(unDeviceIndex:
                                                                                        TrackedDeviceIndex_t)
                                                                          ->
                                                                              ETrackedControllerRole>,
    pub GetTrackedDeviceClass: ::std::option::Option<extern "C" fn(unDeviceIndex:
                                                                       TrackedDeviceIndex_t)
                                                         ->
                                                             ETrackedDeviceClass>,
    pub IsTrackedDeviceConnected: ::std::option::Option<extern "C" fn(unDeviceIndex:
                                                                          TrackedDeviceIndex_t)
                                                            -> u8>,
    pub GetBoolTrackedDeviceProperty: ::std::option::Option<unsafe extern "C" fn(unDeviceIndex:
                                                                                     TrackedDeviceIndex_t,
                                                                                 prop:
                                                                                     ETrackedDeviceProperty,
                                                                                 pError:
                                                                                     *mut ETrackedPropertyError)
                                                                -> u8>,
    pub GetFloatTrackedDeviceProperty: ::std::option::Option<unsafe extern "C" fn(unDeviceIndex:
                                                                                      TrackedDeviceIndex_t,
                                                                                  prop:
                                                                                      ETrackedDeviceProperty,
                                                                                  pError:
                                                                                      *mut ETrackedPropertyError)
                                                                 ->
                                                                     ::std::os::raw::c_float>,
    pub GetInt32TrackedDeviceProperty: ::std::option::Option<unsafe extern "C" fn(unDeviceIndex:
                                                                                      TrackedDeviceIndex_t,
                                                                                  prop:
                                                                                      ETrackedDeviceProperty,
                                                                                  pError:
                                                                                      *mut ETrackedPropertyError)
                                                                 -> int32_t>,
    pub GetUint64TrackedDeviceProperty: ::std::option::Option<unsafe extern "C" fn(unDeviceIndex:
                                                                                       TrackedDeviceIndex_t,
                                                                                   prop:
                                                                                       ETrackedDeviceProperty,
                                                                                   pError:
                                                                                       *mut ETrackedPropertyError)
                                                                  ->
                                                                      uint64_t>,
    pub GetMatrix34TrackedDeviceProperty: ::std::option::Option<unsafe extern "C" fn(unDeviceIndex:
                                                                                         TrackedDeviceIndex_t,
                                                                                     prop:
                                                                                         ETrackedDeviceProperty,
                                                                                     pError:
                                                                                         *mut ETrackedPropertyError)
                                                                    ->
                                                                        Struct_HmdMatrix34_t>,
    pub GetStringTrackedDeviceProperty: ::std::option::Option<unsafe extern "C" fn(unDeviceIndex:
                                                                                       TrackedDeviceIndex_t,
                                                                                   prop:
                                                                                       ETrackedDeviceProperty,
                                                                                   pchValue:
                                                                                       *mut ::std::os::raw::c_char,
                                                                                   unBufferSize:
                                                                                       uint32_t,
                                                                                   pError:
                                                                                       *mut ETrackedPropertyError)
                                                                  ->
                                                                      uint32_t>,
    pub GetPropErrorNameFromEnum: ::std::option::Option<extern "C" fn(error:
                                                                          ETrackedPropertyError)
                                                            ->
                                                                *mut ::std::os::raw::c_char>,
    pub PollNextEvent: ::std::option::Option<unsafe extern "C" fn(pEvent:
                                                                      *mut Struct_VREvent_t,
                                                                  uncbVREvent:
                                                                      uint32_t)
                                                 -> u8>,
    pub PollNextEventWithPose: ::std::option::Option<unsafe extern "C" fn(eOrigin:
                                                                              ETrackingUniverseOrigin,
                                                                          pEvent:
                                                                              *mut Struct_VREvent_t,
                                                                          uncbVREvent:
                                                                              uint32_t,
                                                                          pTrackedDevicePose:
                                                                              *mut TrackedDevicePose_t)
                                                         -> u8>,
    pub GetEventTypeNameFromEnum: ::std::option::Option<extern "C" fn(eType:
                                                                          EVREventType)
                                                            ->
                                                                *mut ::std::os::raw::c_char>,
    pub GetHiddenAreaMesh: ::std::option::Option<extern "C" fn(eEye: EVREye)
                                                     ->
                                                         Struct_HiddenAreaMesh_t>,
    pub GetControllerState: ::std::option::Option<unsafe extern "C" fn(unControllerDeviceIndex:
                                                                           TrackedDeviceIndex_t,
                                                                       pControllerState:
                                                                           *mut VRControllerState_t)
                                                      -> u8>,
    pub GetControllerStateWithPose: ::std::option::Option<unsafe extern "C" fn(eOrigin:
                                                                                   ETrackingUniverseOrigin,
                                                                               unControllerDeviceIndex:
                                                                                   TrackedDeviceIndex_t,
                                                                               pControllerState:
                                                                                   *mut VRControllerState_t,
                                                                               pTrackedDevicePose:
                                                                                   *mut Struct_TrackedDevicePose_t)
                                                              -> u8>,
    pub TriggerHapticPulse: ::std::option::Option<extern "C" fn(unControllerDeviceIndex:
                                                                    TrackedDeviceIndex_t,
                                                                unAxisId:
                                                                    uint32_t,
                                                                usDurationMicroSec:
                                                                    ::std::os::raw::c_ushort)>,
    pub GetButtonIdNameFromEnum: ::std::option::Option<extern "C" fn(eButtonId:
                                                                         EVRButtonId)
                                                           ->
                                                               *mut ::std::os::raw::c_char>,
    pub GetControllerAxisTypeNameFromEnum: ::std::option::Option<extern "C" fn(eAxisType:
                                                                                   EVRControllerAxisType)
                                                                     ->
                                                                         *mut ::std::os::raw::c_char>,
    pub CaptureInputFocus: ::std::option::Option<extern "C" fn() -> u8>,
    pub ReleaseInputFocus: ::std::option::Option<extern "C" fn()>,
    pub IsInputFocusCapturedByAnotherProcess: ::std::option::Option<extern "C" fn()
                                                                        ->
                                                                            u8>,
    pub DriverDebugRequest: ::std::option::Option<unsafe extern "C" fn(unDeviceIndex:
                                                                           TrackedDeviceIndex_t,
                                                                       pchRequest:
                                                                           *mut ::std::os::raw::c_char,
                                                                       pchResponseBuffer:
                                                                           *mut ::std::os::raw::c_char,
                                                                       unResponseBufferSize:
                                                                           uint32_t)
                                                      -> uint32_t>,
    pub PerformFirmwareUpdate: ::std::option::Option<extern "C" fn(unDeviceIndex:
                                                                       TrackedDeviceIndex_t)
                                                         -> EVRFirmwareError>,
    pub AcknowledgeQuit_Exiting: ::std::option::Option<extern "C" fn()>,
    pub AcknowledgeQuit_UserPrompt: ::std::option::Option<extern "C" fn()>,
}
impl ::std::clone::Clone for Struct_VR_IVRSystem_FnTable {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VR_IVRSystem_FnTable {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VR_IVRExtendedDisplay_FnTable {
    pub GetWindowBounds: ::std::option::Option<unsafe extern "C" fn(pnX:
                                                                        *mut int32_t,
                                                                    pnY:
                                                                        *mut int32_t,
                                                                    pnWidth:
                                                                        *mut uint32_t,
                                                                    pnHeight:
                                                                        *mut uint32_t)>,
    pub GetEyeOutputViewport: ::std::option::Option<unsafe extern "C" fn(eEye:
                                                                             EVREye,
                                                                         pnX:
                                                                             *mut uint32_t,
                                                                         pnY:
                                                                             *mut uint32_t,
                                                                         pnWidth:
                                                                             *mut uint32_t,
                                                                         pnHeight:
                                                                             *mut uint32_t)>,
    pub GetDXGIOutputInfo: ::std::option::Option<unsafe extern "C" fn(pnAdapterIndex:
                                                                          *mut int32_t,
                                                                      pnAdapterOutputIndex:
                                                                          *mut int32_t)>,
}
impl ::std::clone::Clone for Struct_VR_IVRExtendedDisplay_FnTable {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VR_IVRExtendedDisplay_FnTable {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VR_IVRApplications_FnTable {
    pub AddApplicationManifest: ::std::option::Option<unsafe extern "C" fn(pchApplicationManifestFullPath:
                                                                               *mut ::std::os::raw::c_char,
                                                                           bTemporary:
                                                                               u8)
                                                          ->
                                                              EVRApplicationError>,
    pub RemoveApplicationManifest: ::std::option::Option<unsafe extern "C" fn(pchApplicationManifestFullPath:
                                                                                  *mut ::std::os::raw::c_char)
                                                             ->
                                                                 EVRApplicationError>,
    pub IsApplicationInstalled: ::std::option::Option<unsafe extern "C" fn(pchAppKey:
                                                                               *mut ::std::os::raw::c_char)
                                                          -> u8>,
    pub GetApplicationCount: ::std::option::Option<extern "C" fn()
                                                       -> uint32_t>,
    pub GetApplicationKeyByIndex: ::std::option::Option<unsafe extern "C" fn(unApplicationIndex:
                                                                                 uint32_t,
                                                                             pchAppKeyBuffer:
                                                                                 *mut ::std::os::raw::c_char,
                                                                             unAppKeyBufferLen:
                                                                                 uint32_t)
                                                            ->
                                                                EVRApplicationError>,
    pub GetApplicationKeyByProcessId: ::std::option::Option<unsafe extern "C" fn(unProcessId:
                                                                                     uint32_t,
                                                                                 pchAppKeyBuffer:
                                                                                     *mut ::std::os::raw::c_char,
                                                                                 unAppKeyBufferLen:
                                                                                     uint32_t)
                                                                ->
                                                                    EVRApplicationError>,
    pub LaunchApplication: ::std::option::Option<unsafe extern "C" fn(pchAppKey:
                                                                          *mut ::std::os::raw::c_char)
                                                     -> EVRApplicationError>,
    pub LaunchTemplateApplication: ::std::option::Option<unsafe extern "C" fn(pchTemplateAppKey:
                                                                                  *mut ::std::os::raw::c_char,
                                                                              pchNewAppKey:
                                                                                  *mut ::std::os::raw::c_char,
                                                                              pKeys:
                                                                                  *mut Struct_AppOverrideKeys_t,
                                                                              unKeys:
                                                                                  uint32_t)
                                                             ->
                                                                 EVRApplicationError>,
    pub LaunchDashboardOverlay: ::std::option::Option<unsafe extern "C" fn(pchAppKey:
                                                                               *mut ::std::os::raw::c_char)
                                                          ->
                                                              EVRApplicationError>,
    pub CancelApplicationLaunch: ::std::option::Option<unsafe extern "C" fn(pchAppKey:
                                                                                *mut ::std::os::raw::c_char)
                                                           -> u8>,
    pub IdentifyApplication: ::std::option::Option<unsafe extern "C" fn(unProcessId:
                                                                            uint32_t,
                                                                        pchAppKey:
                                                                            *mut ::std::os::raw::c_char)
                                                       ->
                                                           EVRApplicationError>,
    pub GetApplicationProcessId: ::std::option::Option<unsafe extern "C" fn(pchAppKey:
                                                                                *mut ::std::os::raw::c_char)
                                                           -> uint32_t>,
    pub GetApplicationsErrorNameFromEnum: ::std::option::Option<extern "C" fn(error:
                                                                                  EVRApplicationError)
                                                                    ->
                                                                        *mut ::std::os::raw::c_char>,
    pub GetApplicationPropertyString: ::std::option::Option<unsafe extern "C" fn(pchAppKey:
                                                                                     *mut ::std::os::raw::c_char,
                                                                                 eProperty:
                                                                                     EVRApplicationProperty,
                                                                                 pchPropertyValueBuffer:
                                                                                     *mut ::std::os::raw::c_char,
                                                                                 unPropertyValueBufferLen:
                                                                                     uint32_t,
                                                                                 peError:
                                                                                     *mut EVRApplicationError)
                                                                -> uint32_t>,
    pub GetApplicationPropertyBool: ::std::option::Option<unsafe extern "C" fn(pchAppKey:
                                                                                   *mut ::std::os::raw::c_char,
                                                                               eProperty:
                                                                                   EVRApplicationProperty,
                                                                               peError:
                                                                                   *mut EVRApplicationError)
                                                              -> u8>,
    pub GetApplicationPropertyUint64: ::std::option::Option<unsafe extern "C" fn(pchAppKey:
                                                                                     *mut ::std::os::raw::c_char,
                                                                                 eProperty:
                                                                                     EVRApplicationProperty,
                                                                                 peError:
                                                                                     *mut EVRApplicationError)
                                                                -> uint64_t>,
    pub SetApplicationAutoLaunch: ::std::option::Option<unsafe extern "C" fn(pchAppKey:
                                                                                 *mut ::std::os::raw::c_char,
                                                                             bAutoLaunch:
                                                                                 u8)
                                                            ->
                                                                EVRApplicationError>,
    pub GetApplicationAutoLaunch: ::std::option::Option<unsafe extern "C" fn(pchAppKey:
                                                                                 *mut ::std::os::raw::c_char)
                                                            -> u8>,
    pub GetStartingApplication: ::std::option::Option<unsafe extern "C" fn(pchAppKeyBuffer:
                                                                               *mut ::std::os::raw::c_char,
                                                                           unAppKeyBufferLen:
                                                                               uint32_t)
                                                          ->
                                                              EVRApplicationError>,
    pub GetTransitionState: ::std::option::Option<extern "C" fn()
                                                      ->
                                                          EVRApplicationTransitionState>,
    pub PerformApplicationPrelaunchCheck: ::std::option::Option<unsafe extern "C" fn(pchAppKey:
                                                                                         *mut ::std::os::raw::c_char)
                                                                    ->
                                                                        EVRApplicationError>,
    pub GetApplicationsTransitionStateNameFromEnum: ::std::option::Option<extern "C" fn(state:
                                                                                            EVRApplicationTransitionState)
                                                                              ->
                                                                                  *mut ::std::os::raw::c_char>,
    pub IsQuitUserPromptRequested: ::std::option::Option<extern "C" fn()
                                                             -> u8>,
    pub LaunchInternalProcess: ::std::option::Option<unsafe extern "C" fn(pchBinaryPath:
                                                                              *mut ::std::os::raw::c_char,
                                                                          pchArguments:
                                                                              *mut ::std::os::raw::c_char,
                                                                          pchWorkingDirectory:
                                                                              *mut ::std::os::raw::c_char)
                                                         ->
                                                             EVRApplicationError>,
}
impl ::std::clone::Clone for Struct_VR_IVRApplications_FnTable {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VR_IVRApplications_FnTable {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VR_IVRChaperone_FnTable {
    pub GetCalibrationState: ::std::option::Option<extern "C" fn()
                                                       ->
                                                           ChaperoneCalibrationState>,
    pub GetPlayAreaSize: ::std::option::Option<unsafe extern "C" fn(pSizeX:
                                                                        *mut ::std::os::raw::c_float,
                                                                    pSizeZ:
                                                                        *mut ::std::os::raw::c_float)
                                                   -> u8>,
    pub GetPlayAreaRect: ::std::option::Option<unsafe extern "C" fn(rect:
                                                                        *mut Struct_HmdQuad_t)
                                                   -> u8>,
    pub ReloadInfo: ::std::option::Option<extern "C" fn()>,
    pub SetSceneColor: ::std::option::Option<extern "C" fn(color:
                                                               Struct_HmdColor_t)>,
    pub GetBoundsColor: ::std::option::Option<unsafe extern "C" fn(pOutputColorArray:
                                                                       *mut Struct_HmdColor_t,
                                                                   nNumOutputColors:
                                                                       ::std::os::raw::c_int,
                                                                   flCollisionBoundsFadeDistance:
                                                                       ::std::os::raw::c_float,
                                                                   pOutputCameraColor:
                                                                       *mut Struct_HmdColor_t)>,
    pub AreBoundsVisible: ::std::option::Option<extern "C" fn() -> u8>,
    pub ForceBoundsVisible: ::std::option::Option<extern "C" fn(bForce: u8)>,
}
impl ::std::clone::Clone for Struct_VR_IVRChaperone_FnTable {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VR_IVRChaperone_FnTable {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VR_IVRChaperoneSetup_FnTable {
    pub CommitWorkingCopy: ::std::option::Option<extern "C" fn(configFile:
                                                                   EChaperoneConfigFile)
                                                     -> u8>,
    pub RevertWorkingCopy: ::std::option::Option<extern "C" fn()>,
    pub GetWorkingPlayAreaSize: ::std::option::Option<unsafe extern "C" fn(pSizeX:
                                                                               *mut ::std::os::raw::c_float,
                                                                           pSizeZ:
                                                                               *mut ::std::os::raw::c_float)
                                                          -> u8>,
    pub GetWorkingPlayAreaRect: ::std::option::Option<unsafe extern "C" fn(rect:
                                                                               *mut Struct_HmdQuad_t)
                                                          -> u8>,
    pub GetWorkingCollisionBoundsInfo: ::std::option::Option<unsafe extern "C" fn(pQuadsBuffer:
                                                                                      *mut Struct_HmdQuad_t,
                                                                                  punQuadsCount:
                                                                                      *mut uint32_t)
                                                                 -> u8>,
    pub GetLiveCollisionBoundsInfo: ::std::option::Option<unsafe extern "C" fn(pQuadsBuffer:
                                                                                   *mut Struct_HmdQuad_t,
                                                                               punQuadsCount:
                                                                                   *mut uint32_t)
                                                              -> u8>,
    pub GetWorkingSeatedZeroPoseToRawTrackingPose: ::std::option::Option<unsafe extern "C" fn(pmatSeatedZeroPoseToRawTrackingPose:
                                                                                                  *mut Struct_HmdMatrix34_t)
                                                                             ->
                                                                                 u8>,
    pub GetWorkingStandingZeroPoseToRawTrackingPose: ::std::option::Option<unsafe extern "C" fn(pmatStandingZeroPoseToRawTrackingPose:
                                                                                                    *mut Struct_HmdMatrix34_t)
                                                                               ->
                                                                                   u8>,
    pub SetWorkingPlayAreaSize: ::std::option::Option<extern "C" fn(sizeX:
                                                                        ::std::os::raw::c_float,
                                                                    sizeZ:
                                                                        ::std::os::raw::c_float)>,
    pub SetWorkingCollisionBoundsInfo: ::std::option::Option<unsafe extern "C" fn(pQuadsBuffer:
                                                                                      *mut Struct_HmdQuad_t,
                                                                                  unQuadsCount:
                                                                                      uint32_t)>,
    pub SetWorkingSeatedZeroPoseToRawTrackingPose: ::std::option::Option<unsafe extern "C" fn(pMatSeatedZeroPoseToRawTrackingPose:
                                                                                                  *mut Struct_HmdMatrix34_t)>,
    pub SetWorkingStandingZeroPoseToRawTrackingPose: ::std::option::Option<unsafe extern "C" fn(pMatStandingZeroPoseToRawTrackingPose:
                                                                                                    *mut Struct_HmdMatrix34_t)>,
    pub ReloadFromDisk: ::std::option::Option<extern "C" fn(configFile:
                                                                EChaperoneConfigFile)>,
    pub GetLiveSeatedZeroPoseToRawTrackingPose: ::std::option::Option<unsafe extern "C" fn(pmatSeatedZeroPoseToRawTrackingPose:
                                                                                               *mut Struct_HmdMatrix34_t)
                                                                          ->
                                                                              u8>,
    pub SetWorkingCollisionBoundsTagsInfo: ::std::option::Option<unsafe extern "C" fn(pTagsBuffer:
                                                                                          *mut uint8_t,
                                                                                      unTagCount:
                                                                                          uint32_t)>,
    pub GetLiveCollisionBoundsTagsInfo: ::std::option::Option<unsafe extern "C" fn(pTagsBuffer:
                                                                                       *mut uint8_t,
                                                                                   punTagCount:
                                                                                       *mut uint32_t)
                                                                  -> u8>,
    pub SetWorkingPhysicalBoundsInfo: ::std::option::Option<unsafe extern "C" fn(pQuadsBuffer:
                                                                                     *mut Struct_HmdQuad_t,
                                                                                 unQuadsCount:
                                                                                     uint32_t)
                                                                -> u8>,
    pub GetLivePhysicalBoundsInfo: ::std::option::Option<unsafe extern "C" fn(pQuadsBuffer:
                                                                                  *mut Struct_HmdQuad_t,
                                                                              punQuadsCount:
                                                                                  *mut uint32_t)
                                                             -> u8>,
    pub ExportLiveToBuffer: ::std::option::Option<unsafe extern "C" fn(pBuffer:
                                                                           *mut ::std::os::raw::c_char,
                                                                       pnBufferLength:
                                                                           *mut uint32_t)
                                                      -> u8>,
    pub ImportFromBufferToWorking: ::std::option::Option<unsafe extern "C" fn(pBuffer:
                                                                                  *mut ::std::os::raw::c_char,
                                                                              nImportFlags:
                                                                                  uint32_t)
                                                             -> u8>,
}
impl ::std::clone::Clone for Struct_VR_IVRChaperoneSetup_FnTable {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VR_IVRChaperoneSetup_FnTable {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VR_IVRCompositor_FnTable {
    pub SetTrackingSpace: ::std::option::Option<extern "C" fn(eOrigin:
                                                                  ETrackingUniverseOrigin)>,
    pub GetTrackingSpace: ::std::option::Option<extern "C" fn()
                                                    ->
                                                        ETrackingUniverseOrigin>,
    pub WaitGetPoses: ::std::option::Option<unsafe extern "C" fn(pRenderPoseArray:
                                                                     *mut Struct_TrackedDevicePose_t,
                                                                 unRenderPoseArrayCount:
                                                                     uint32_t,
                                                                 pGamePoseArray:
                                                                     *mut Struct_TrackedDevicePose_t,
                                                                 unGamePoseArrayCount:
                                                                     uint32_t)
                                                -> EVRCompositorError>,
    pub GetLastPoses: ::std::option::Option<unsafe extern "C" fn(pRenderPoseArray:
                                                                     *mut Struct_TrackedDevicePose_t,
                                                                 unRenderPoseArrayCount:
                                                                     uint32_t,
                                                                 pGamePoseArray:
                                                                     *mut Struct_TrackedDevicePose_t,
                                                                 unGamePoseArrayCount:
                                                                     uint32_t)
                                                -> EVRCompositorError>,
    pub GetLastPoseForTrackedDeviceIndex: ::std::option::Option<unsafe extern "C" fn(unDeviceIndex:
                                                                                         TrackedDeviceIndex_t,
                                                                                     pOutputPose:
                                                                                         *mut Struct_TrackedDevicePose_t,
                                                                                     pOutputGamePose:
                                                                                         *mut Struct_TrackedDevicePose_t)
                                                                    ->
                                                                        EVRCompositorError>,
    pub Submit: ::std::option::Option<unsafe extern "C" fn(eEye: EVREye,
                                                           pTexture:
                                                               *mut Struct_Texture_t,
                                                           pBounds:
                                                               *mut Struct_VRTextureBounds_t,
                                                           nSubmitFlags:
                                                               EVRSubmitFlags)
                                          -> EVRCompositorError>,
    pub ClearLastSubmittedFrame: ::std::option::Option<extern "C" fn()>,
    pub PostPresentHandoff: ::std::option::Option<extern "C" fn()>,
    pub GetFrameTiming: ::std::option::Option<unsafe extern "C" fn(pTiming:
                                                                       *mut Struct_Compositor_FrameTiming,
                                                                   unFramesAgo:
                                                                       uint32_t)
                                                  -> u8>,
    pub GetFrameTimeRemaining: ::std::option::Option<extern "C" fn()
                                                         ->
                                                             ::std::os::raw::c_float>,
    pub FadeToColor: ::std::option::Option<extern "C" fn(fSeconds:
                                                             ::std::os::raw::c_float,
                                                         fRed:
                                                             ::std::os::raw::c_float,
                                                         fGreen:
                                                             ::std::os::raw::c_float,
                                                         fBlue:
                                                             ::std::os::raw::c_float,
                                                         fAlpha:
                                                             ::std::os::raw::c_float,
                                                         bBackground: u8)>,
    pub FadeGrid: ::std::option::Option<extern "C" fn(fSeconds:
                                                          ::std::os::raw::c_float,
                                                      bFadeIn: u8)>,
    pub SetSkyboxOverride: ::std::option::Option<unsafe extern "C" fn(pTextures:
                                                                          *mut Struct_Texture_t,
                                                                      unTextureCount:
                                                                          uint32_t)
                                                     -> EVRCompositorError>,
    pub ClearSkyboxOverride: ::std::option::Option<extern "C" fn()>,
    pub CompositorBringToFront: ::std::option::Option<extern "C" fn()>,
    pub CompositorGoToBack: ::std::option::Option<extern "C" fn()>,
    pub CompositorQuit: ::std::option::Option<extern "C" fn()>,
    pub IsFullscreen: ::std::option::Option<extern "C" fn() -> u8>,
    pub GetCurrentSceneFocusProcess: ::std::option::Option<extern "C" fn()
                                                               -> uint32_t>,
    pub GetLastFrameRenderer: ::std::option::Option<extern "C" fn()
                                                        -> uint32_t>,
    pub CanRenderScene: ::std::option::Option<extern "C" fn() -> u8>,
    pub ShowMirrorWindow: ::std::option::Option<extern "C" fn()>,
    pub HideMirrorWindow: ::std::option::Option<extern "C" fn()>,
    pub IsMirrorWindowVisible: ::std::option::Option<extern "C" fn() -> u8>,
    pub CompositorDumpImages: ::std::option::Option<extern "C" fn()>,
    pub ShouldAppRenderWithLowResources: ::std::option::Option<extern "C" fn()
                                                                   -> u8>,
    pub ForceInterleavedReprojectionOn: ::std::option::Option<extern "C" fn(bOverride:
                                                                                u8)>,
}
impl ::std::clone::Clone for Struct_VR_IVRCompositor_FnTable {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VR_IVRCompositor_FnTable {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VR_IVROverlay_FnTable {
    pub FindOverlay: ::std::option::Option<unsafe extern "C" fn(pchOverlayKey:
                                                                    *mut ::std::os::raw::c_char,
                                                                pOverlayHandle:
                                                                    *mut VROverlayHandle_t)
                                               -> EVROverlayError>,
    pub CreateOverlay: ::std::option::Option<unsafe extern "C" fn(pchOverlayKey:
                                                                      *mut ::std::os::raw::c_char,
                                                                  pchOverlayFriendlyName:
                                                                      *mut ::std::os::raw::c_char,
                                                                  pOverlayHandle:
                                                                      *mut VROverlayHandle_t)
                                                 -> EVROverlayError>,
    pub DestroyOverlay: ::std::option::Option<extern "C" fn(ulOverlayHandle:
                                                                VROverlayHandle_t)
                                                  -> EVROverlayError>,
    pub SetHighQualityOverlay: ::std::option::Option<extern "C" fn(ulOverlayHandle:
                                                                       VROverlayHandle_t)
                                                         -> EVROverlayError>,
    pub GetHighQualityOverlay: ::std::option::Option<extern "C" fn()
                                                         ->
                                                             VROverlayHandle_t>,
    pub GetOverlayKey: ::std::option::Option<unsafe extern "C" fn(ulOverlayHandle:
                                                                      VROverlayHandle_t,
                                                                  pchValue:
                                                                      *mut ::std::os::raw::c_char,
                                                                  unBufferSize:
                                                                      uint32_t,
                                                                  pError:
                                                                      *mut EVROverlayError)
                                                 -> uint32_t>,
    pub GetOverlayName: ::std::option::Option<unsafe extern "C" fn(ulOverlayHandle:
                                                                       VROverlayHandle_t,
                                                                   pchValue:
                                                                       *mut ::std::os::raw::c_char,
                                                                   unBufferSize:
                                                                       uint32_t,
                                                                   pError:
                                                                       *mut EVROverlayError)
                                                  -> uint32_t>,
    pub GetOverlayImageData: ::std::option::Option<unsafe extern "C" fn(ulOverlayHandle:
                                                                            VROverlayHandle_t,
                                                                        pvBuffer:
                                                                            *mut ::std::os::raw::c_void,
                                                                        unBufferSize:
                                                                            uint32_t,
                                                                        punWidth:
                                                                            *mut uint32_t,
                                                                        punHeight:
                                                                            *mut uint32_t)
                                                       -> EVROverlayError>,
    pub GetOverlayErrorNameFromEnum: ::std::option::Option<extern "C" fn(error:
                                                                             EVROverlayError)
                                                               ->
                                                                   *mut ::std::os::raw::c_char>,
    pub SetOverlayRenderingPid: ::std::option::Option<extern "C" fn(ulOverlayHandle:
                                                                        VROverlayHandle_t,
                                                                    unPID:
                                                                        uint32_t)
                                                          -> EVROverlayError>,
    pub GetOverlayRenderingPid: ::std::option::Option<extern "C" fn(ulOverlayHandle:
                                                                        VROverlayHandle_t)
                                                          -> uint32_t>,
    pub SetOverlayFlag: ::std::option::Option<extern "C" fn(ulOverlayHandle:
                                                                VROverlayHandle_t,
                                                            eOverlayFlag:
                                                                VROverlayFlags,
                                                            bEnabled: u8)
                                                  -> EVROverlayError>,
    pub GetOverlayFlag: ::std::option::Option<unsafe extern "C" fn(ulOverlayHandle:
                                                                       VROverlayHandle_t,
                                                                   eOverlayFlag:
                                                                       VROverlayFlags,
                                                                   pbEnabled:
                                                                       *mut u8)
                                                  -> EVROverlayError>,
    pub SetOverlayColor: ::std::option::Option<extern "C" fn(ulOverlayHandle:
                                                                 VROverlayHandle_t,
                                                             fRed:
                                                                 ::std::os::raw::c_float,
                                                             fGreen:
                                                                 ::std::os::raw::c_float,
                                                             fBlue:
                                                                 ::std::os::raw::c_float)
                                                   -> EVROverlayError>,
    pub GetOverlayColor: ::std::option::Option<unsafe extern "C" fn(ulOverlayHandle:
                                                                        VROverlayHandle_t,
                                                                    pfRed:
                                                                        *mut ::std::os::raw::c_float,
                                                                    pfGreen:
                                                                        *mut ::std::os::raw::c_float,
                                                                    pfBlue:
                                                                        *mut ::std::os::raw::c_float)
                                                   -> EVROverlayError>,
    pub SetOverlayAlpha: ::std::option::Option<extern "C" fn(ulOverlayHandle:
                                                                 VROverlayHandle_t,
                                                             fAlpha:
                                                                 ::std::os::raw::c_float)
                                                   -> EVROverlayError>,
    pub GetOverlayAlpha: ::std::option::Option<unsafe extern "C" fn(ulOverlayHandle:
                                                                        VROverlayHandle_t,
                                                                    pfAlpha:
                                                                        *mut ::std::os::raw::c_float)
                                                   -> EVROverlayError>,
    pub SetOverlayWidthInMeters: ::std::option::Option<extern "C" fn(ulOverlayHandle:
                                                                         VROverlayHandle_t,
                                                                     fWidthInMeters:
                                                                         ::std::os::raw::c_float)
                                                           ->
                                                               EVROverlayError>,
    pub GetOverlayWidthInMeters: ::std::option::Option<unsafe extern "C" fn(ulOverlayHandle:
                                                                                VROverlayHandle_t,
                                                                            pfWidthInMeters:
                                                                                *mut ::std::os::raw::c_float)
                                                           ->
                                                               EVROverlayError>,
    pub SetOverlayAutoCurveDistanceRangeInMeters: ::std::option::Option<extern "C" fn(ulOverlayHandle:
                                                                                          VROverlayHandle_t,
                                                                                      fMinDistanceInMeters:
                                                                                          ::std::os::raw::c_float,
                                                                                      fMaxDistanceInMeters:
                                                                                          ::std::os::raw::c_float)
                                                                            ->
                                                                                EVROverlayError>,
    pub GetOverlayAutoCurveDistanceRangeInMeters: ::std::option::Option<unsafe extern "C" fn(ulOverlayHandle:
                                                                                                 VROverlayHandle_t,
                                                                                             pfMinDistanceInMeters:
                                                                                                 *mut ::std::os::raw::c_float,
                                                                                             pfMaxDistanceInMeters:
                                                                                                 *mut ::std::os::raw::c_float)
                                                                            ->
                                                                                EVROverlayError>,
    pub SetOverlayTextureColorSpace: ::std::option::Option<extern "C" fn(ulOverlayHandle:
                                                                             VROverlayHandle_t,
                                                                         eTextureColorSpace:
                                                                             EColorSpace)
                                                               ->
                                                                   EVROverlayError>,
    pub GetOverlayTextureColorSpace: ::std::option::Option<unsafe extern "C" fn(ulOverlayHandle:
                                                                                    VROverlayHandle_t,
                                                                                peTextureColorSpace:
                                                                                    *mut EColorSpace)
                                                               ->
                                                                   EVROverlayError>,
    pub SetOverlayTextureBounds: ::std::option::Option<unsafe extern "C" fn(ulOverlayHandle:
                                                                                VROverlayHandle_t,
                                                                            pOverlayTextureBounds:
                                                                                *mut Struct_VRTextureBounds_t)
                                                           ->
                                                               EVROverlayError>,
    pub GetOverlayTextureBounds: ::std::option::Option<unsafe extern "C" fn(ulOverlayHandle:
                                                                                VROverlayHandle_t,
                                                                            pOverlayTextureBounds:
                                                                                *mut Struct_VRTextureBounds_t)
                                                           ->
                                                               EVROverlayError>,
    pub GetOverlayTransformType: ::std::option::Option<unsafe extern "C" fn(ulOverlayHandle:
                                                                                VROverlayHandle_t,
                                                                            peTransformType:
                                                                                *mut VROverlayTransformType)
                                                           ->
                                                               EVROverlayError>,
    pub SetOverlayTransformAbsolute: ::std::option::Option<unsafe extern "C" fn(ulOverlayHandle:
                                                                                    VROverlayHandle_t,
                                                                                eTrackingOrigin:
                                                                                    ETrackingUniverseOrigin,
                                                                                pmatTrackingOriginToOverlayTransform:
                                                                                    *mut Struct_HmdMatrix34_t)
                                                               ->
                                                                   EVROverlayError>,
    pub GetOverlayTransformAbsolute: ::std::option::Option<unsafe extern "C" fn(ulOverlayHandle:
                                                                                    VROverlayHandle_t,
                                                                                peTrackingOrigin:
                                                                                    *mut ETrackingUniverseOrigin,
                                                                                pmatTrackingOriginToOverlayTransform:
                                                                                    *mut Struct_HmdMatrix34_t)
                                                               ->
                                                                   EVROverlayError>,
    pub SetOverlayTransformTrackedDeviceRelative: ::std::option::Option<unsafe extern "C" fn(ulOverlayHandle:
                                                                                                 VROverlayHandle_t,
                                                                                             unTrackedDevice:
                                                                                                 TrackedDeviceIndex_t,
                                                                                             pmatTrackedDeviceToOverlayTransform:
                                                                                                 *mut Struct_HmdMatrix34_t)
                                                                            ->
                                                                                EVROverlayError>,
    pub GetOverlayTransformTrackedDeviceRelative: ::std::option::Option<unsafe extern "C" fn(ulOverlayHandle:
                                                                                                 VROverlayHandle_t,
                                                                                             punTrackedDevice:
                                                                                                 *mut TrackedDeviceIndex_t,
                                                                                             pmatTrackedDeviceToOverlayTransform:
                                                                                                 *mut Struct_HmdMatrix34_t)
                                                                            ->
                                                                                EVROverlayError>,
    pub SetOverlayTransformTrackedDeviceComponent: ::std::option::Option<unsafe extern "C" fn(ulOverlayHandle:
                                                                                                  VROverlayHandle_t,
                                                                                              unDeviceIndex:
                                                                                                  TrackedDeviceIndex_t,
                                                                                              pchComponentName:
                                                                                                  *mut ::std::os::raw::c_char)
                                                                             ->
                                                                                 EVROverlayError>,
    pub GetOverlayTransformTrackedDeviceComponent: ::std::option::Option<unsafe extern "C" fn(ulOverlayHandle:
                                                                                                  VROverlayHandle_t,
                                                                                              punDeviceIndex:
                                                                                                  *mut TrackedDeviceIndex_t,
                                                                                              pchComponentName:
                                                                                                  *mut ::std::os::raw::c_char,
                                                                                              unComponentNameSize:
                                                                                                  uint32_t)
                                                                             ->
                                                                                 EVROverlayError>,
    pub ShowOverlay: ::std::option::Option<extern "C" fn(ulOverlayHandle:
                                                             VROverlayHandle_t)
                                               -> EVROverlayError>,
    pub HideOverlay: ::std::option::Option<extern "C" fn(ulOverlayHandle:
                                                             VROverlayHandle_t)
                                               -> EVROverlayError>,
    pub IsOverlayVisible: ::std::option::Option<extern "C" fn(ulOverlayHandle:
                                                                  VROverlayHandle_t)
                                                    -> u8>,
    pub GetTransformForOverlayCoordinates: ::std::option::Option<unsafe extern "C" fn(ulOverlayHandle:
                                                                                          VROverlayHandle_t,
                                                                                      eTrackingOrigin:
                                                                                          ETrackingUniverseOrigin,
                                                                                      coordinatesInOverlay:
                                                                                          Struct_HmdVector2_t,
                                                                                      pmatTransform:
                                                                                          *mut Struct_HmdMatrix34_t)
                                                                     ->
                                                                         EVROverlayError>,
    pub PollNextOverlayEvent: ::std::option::Option<unsafe extern "C" fn(ulOverlayHandle:
                                                                             VROverlayHandle_t,
                                                                         pEvent:
                                                                             *mut Struct_VREvent_t,
                                                                         uncbVREvent:
                                                                             uint32_t)
                                                        -> u8>,
    pub GetOverlayInputMethod: ::std::option::Option<unsafe extern "C" fn(ulOverlayHandle:
                                                                              VROverlayHandle_t,
                                                                          peInputMethod:
                                                                              *mut VROverlayInputMethod)
                                                         -> EVROverlayError>,
    pub SetOverlayInputMethod: ::std::option::Option<extern "C" fn(ulOverlayHandle:
                                                                       VROverlayHandle_t,
                                                                   eInputMethod:
                                                                       VROverlayInputMethod)
                                                         -> EVROverlayError>,
    pub GetOverlayMouseScale: ::std::option::Option<unsafe extern "C" fn(ulOverlayHandle:
                                                                             VROverlayHandle_t,
                                                                         pvecMouseScale:
                                                                             *mut Struct_HmdVector2_t)
                                                        -> EVROverlayError>,
    pub SetOverlayMouseScale: ::std::option::Option<unsafe extern "C" fn(ulOverlayHandle:
                                                                             VROverlayHandle_t,
                                                                         pvecMouseScale:
                                                                             *mut Struct_HmdVector2_t)
                                                        -> EVROverlayError>,
    pub ComputeOverlayIntersection: ::std::option::Option<unsafe extern "C" fn(ulOverlayHandle:
                                                                                   VROverlayHandle_t,
                                                                               pParams:
                                                                                   *mut Struct_VROverlayIntersectionParams_t,
                                                                               pResults:
                                                                                   *mut Struct_VROverlayIntersectionResults_t)
                                                              -> u8>,
    pub HandleControllerOverlayInteractionAsMouse: ::std::option::Option<extern "C" fn(ulOverlayHandle:
                                                                                           VROverlayHandle_t,
                                                                                       unControllerDeviceIndex:
                                                                                           TrackedDeviceIndex_t)
                                                                             ->
                                                                                 u8>,
    pub IsHoverTargetOverlay: ::std::option::Option<extern "C" fn(ulOverlayHandle:
                                                                      VROverlayHandle_t)
                                                        -> u8>,
    pub GetGamepadFocusOverlay: ::std::option::Option<extern "C" fn()
                                                          ->
                                                              VROverlayHandle_t>,
    pub SetGamepadFocusOverlay: ::std::option::Option<extern "C" fn(ulNewFocusOverlay:
                                                                        VROverlayHandle_t)
                                                          -> EVROverlayError>,
    pub SetOverlayNeighbor: ::std::option::Option<extern "C" fn(eDirection:
                                                                    EOverlayDirection,
                                                                ulFrom:
                                                                    VROverlayHandle_t,
                                                                ulTo:
                                                                    VROverlayHandle_t)
                                                      -> EVROverlayError>,
    pub MoveGamepadFocusToNeighbor: ::std::option::Option<extern "C" fn(eDirection:
                                                                            EOverlayDirection,
                                                                        ulFrom:
                                                                            VROverlayHandle_t)
                                                              ->
                                                                  EVROverlayError>,
    pub SetOverlayTexture: ::std::option::Option<unsafe extern "C" fn(ulOverlayHandle:
                                                                          VROverlayHandle_t,
                                                                      pTexture:
                                                                          *mut Struct_Texture_t)
                                                     -> EVROverlayError>,
    pub ClearOverlayTexture: ::std::option::Option<extern "C" fn(ulOverlayHandle:
                                                                     VROverlayHandle_t)
                                                       -> EVROverlayError>,
    pub SetOverlayRaw: ::std::option::Option<unsafe extern "C" fn(ulOverlayHandle:
                                                                      VROverlayHandle_t,
                                                                  pvBuffer:
                                                                      *mut ::std::os::raw::c_void,
                                                                  unWidth:
                                                                      uint32_t,
                                                                  unHeight:
                                                                      uint32_t,
                                                                  unDepth:
                                                                      uint32_t)
                                                 -> EVROverlayError>,
    pub SetOverlayFromFile: ::std::option::Option<unsafe extern "C" fn(ulOverlayHandle:
                                                                           VROverlayHandle_t,
                                                                       pchFilePath:
                                                                           *mut ::std::os::raw::c_char)
                                                      -> EVROverlayError>,
    pub GetOverlayTexture: ::std::option::Option<unsafe extern "C" fn(ulOverlayHandle:
                                                                          VROverlayHandle_t,
                                                                      pNativeTextureHandle:
                                                                          *mut *mut ::std::os::raw::c_void,
                                                                      pNativeTextureRef:
                                                                          *mut ::std::os::raw::c_void,
                                                                      pWidth:
                                                                          *mut uint32_t,
                                                                      pHeight:
                                                                          *mut uint32_t,
                                                                      pNativeFormat:
                                                                          *mut uint32_t,
                                                                      pAPI:
                                                                          *mut EGraphicsAPIConvention,
                                                                      pColorSpace:
                                                                          *mut EColorSpace)
                                                     -> EVROverlayError>,
    pub ReleaseNativeOverlayHandle: ::std::option::Option<unsafe extern "C" fn(ulOverlayHandle:
                                                                                   VROverlayHandle_t,
                                                                               pNativeTextureHandle:
                                                                                   *mut ::std::os::raw::c_void)
                                                              ->
                                                                  EVROverlayError>,
    pub CreateDashboardOverlay: ::std::option::Option<unsafe extern "C" fn(pchOverlayKey:
                                                                               *mut ::std::os::raw::c_char,
                                                                           pchOverlayFriendlyName:
                                                                               *mut ::std::os::raw::c_char,
                                                                           pMainHandle:
                                                                               *mut VROverlayHandle_t,
                                                                           pThumbnailHandle:
                                                                               *mut VROverlayHandle_t)
                                                          -> EVROverlayError>,
    pub IsDashboardVisible: ::std::option::Option<extern "C" fn() -> u8>,
    pub IsActiveDashboardOverlay: ::std::option::Option<extern "C" fn(ulOverlayHandle:
                                                                          VROverlayHandle_t)
                                                            -> u8>,
    pub SetDashboardOverlaySceneProcess: ::std::option::Option<extern "C" fn(ulOverlayHandle:
                                                                                 VROverlayHandle_t,
                                                                             unProcessId:
                                                                                 uint32_t)
                                                                   ->
                                                                       EVROverlayError>,
    pub GetDashboardOverlaySceneProcess: ::std::option::Option<unsafe extern "C" fn(ulOverlayHandle:
                                                                                        VROverlayHandle_t,
                                                                                    punProcessId:
                                                                                        *mut uint32_t)
                                                                   ->
                                                                       EVROverlayError>,
    pub ShowDashboard: ::std::option::Option<unsafe extern "C" fn(pchOverlayToShow:
                                                                      *mut ::std::os::raw::c_char)>,
    pub GetPrimaryDashboardDevice: ::std::option::Option<extern "C" fn()
                                                             ->
                                                                 TrackedDeviceIndex_t>,
    pub ShowKeyboard: ::std::option::Option<unsafe extern "C" fn(eInputMode:
                                                                     EGamepadTextInputMode,
                                                                 eLineInputMode:
                                                                     EGamepadTextInputLineMode,
                                                                 pchDescription:
                                                                     *mut ::std::os::raw::c_char,
                                                                 unCharMax:
                                                                     uint32_t,
                                                                 pchExistingText:
                                                                     *mut ::std::os::raw::c_char,
                                                                 bUseMinimalMode:
                                                                     u8,
                                                                 uUserValue:
                                                                     uint64_t)
                                                -> EVROverlayError>,
    pub ShowKeyboardForOverlay: ::std::option::Option<unsafe extern "C" fn(ulOverlayHandle:
                                                                               VROverlayHandle_t,
                                                                           eInputMode:
                                                                               EGamepadTextInputMode,
                                                                           eLineInputMode:
                                                                               EGamepadTextInputLineMode,
                                                                           pchDescription:
                                                                               *mut ::std::os::raw::c_char,
                                                                           unCharMax:
                                                                               uint32_t,
                                                                           pchExistingText:
                                                                               *mut ::std::os::raw::c_char,
                                                                           bUseMinimalMode:
                                                                               u8,
                                                                           uUserValue:
                                                                               uint64_t)
                                                          -> EVROverlayError>,
    pub GetKeyboardText: ::std::option::Option<unsafe extern "C" fn(pchText:
                                                                        *mut ::std::os::raw::c_char,
                                                                    cchText:
                                                                        uint32_t)
                                                   -> uint32_t>,
    pub HideKeyboard: ::std::option::Option<extern "C" fn()>,
    pub SetKeyboardTransformAbsolute: ::std::option::Option<unsafe extern "C" fn(eTrackingOrigin:
                                                                                     ETrackingUniverseOrigin,
                                                                                 pmatTrackingOriginToKeyboardTransform:
                                                                                     *mut Struct_HmdMatrix34_t)>,
    pub SetKeyboardPositionForOverlay: ::std::option::Option<extern "C" fn(ulOverlayHandle:
                                                                               VROverlayHandle_t,
                                                                           avoidRect:
                                                                               Struct_HmdRect2_t)>,
}
impl ::std::clone::Clone for Struct_VR_IVROverlay_FnTable {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VR_IVROverlay_FnTable {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VR_IVRRenderModels_FnTable {
    pub LoadRenderModel_Async: ::std::option::Option<unsafe extern "C" fn(pchRenderModelName:
                                                                              *mut ::std::os::raw::c_char,
                                                                          ppRenderModel:
                                                                              *mut *mut Struct_RenderModel_t)
                                                         ->
                                                             EVRRenderModelError>,
    pub FreeRenderModel: ::std::option::Option<unsafe extern "C" fn(pRenderModel:
                                                                        *mut Struct_RenderModel_t)>,
    pub LoadTexture_Async: ::std::option::Option<unsafe extern "C" fn(textureId:
                                                                          TextureID_t,
                                                                      ppTexture:
                                                                          *mut *mut Struct_RenderModel_TextureMap_t)
                                                     -> EVRRenderModelError>,
    pub FreeTexture: ::std::option::Option<unsafe extern "C" fn(pTexture:
                                                                    *mut Struct_RenderModel_TextureMap_t)>,
    pub LoadTextureD3D11_Async: ::std::option::Option<unsafe extern "C" fn(textureId:
                                                                               TextureID_t,
                                                                           pD3D11Device:
                                                                               *mut ::std::os::raw::c_void,
                                                                           ppD3D11Texture2D:
                                                                               *mut *mut ::std::os::raw::c_void)
                                                          ->
                                                              EVRRenderModelError>,
    pub LoadIntoTextureD3D11_Async: ::std::option::Option<unsafe extern "C" fn(textureId:
                                                                                   TextureID_t,
                                                                               pDstTexture:
                                                                                   *mut ::std::os::raw::c_void)
                                                              ->
                                                                  EVRRenderModelError>,
    pub FreeTextureD3D11: ::std::option::Option<unsafe extern "C" fn(pD3D11Texture2D:
                                                                         *mut ::std::os::raw::c_void)>,
    pub GetRenderModelName: ::std::option::Option<unsafe extern "C" fn(unRenderModelIndex:
                                                                           uint32_t,
                                                                       pchRenderModelName:
                                                                           *mut ::std::os::raw::c_char,
                                                                       unRenderModelNameLen:
                                                                           uint32_t)
                                                      -> uint32_t>,
    pub GetRenderModelCount: ::std::option::Option<extern "C" fn()
                                                       -> uint32_t>,
    pub GetComponentCount: ::std::option::Option<unsafe extern "C" fn(pchRenderModelName:
                                                                          *mut ::std::os::raw::c_char)
                                                     -> uint32_t>,
    pub GetComponentName: ::std::option::Option<unsafe extern "C" fn(pchRenderModelName:
                                                                         *mut ::std::os::raw::c_char,
                                                                     unComponentIndex:
                                                                         uint32_t,
                                                                     pchComponentName:
                                                                         *mut ::std::os::raw::c_char,
                                                                     unComponentNameLen:
                                                                         uint32_t)
                                                    -> uint32_t>,
    pub GetComponentButtonMask: ::std::option::Option<unsafe extern "C" fn(pchRenderModelName:
                                                                               *mut ::std::os::raw::c_char,
                                                                           pchComponentName:
                                                                               *mut ::std::os::raw::c_char)
                                                          -> uint64_t>,
    pub GetComponentRenderModelName: ::std::option::Option<unsafe extern "C" fn(pchRenderModelName:
                                                                                    *mut ::std::os::raw::c_char,
                                                                                pchComponentName:
                                                                                    *mut ::std::os::raw::c_char,
                                                                                pchComponentRenderModelName:
                                                                                    *mut ::std::os::raw::c_char,
                                                                                unComponentRenderModelNameLen:
                                                                                    uint32_t)
                                                               -> uint32_t>,
    pub GetComponentState: ::std::option::Option<unsafe extern "C" fn(pchRenderModelName:
                                                                          *mut ::std::os::raw::c_char,
                                                                      pchComponentName:
                                                                          *mut ::std::os::raw::c_char,
                                                                      pControllerState:
                                                                          *mut VRControllerState_t,
                                                                      pState:
                                                                          *mut Struct_RenderModel_ControllerMode_State_t,
                                                                      pComponentState:
                                                                          *mut Struct_RenderModel_ComponentState_t)
                                                     -> u8>,
    pub RenderModelHasComponent: ::std::option::Option<unsafe extern "C" fn(pchRenderModelName:
                                                                                *mut ::std::os::raw::c_char,
                                                                            pchComponentName:
                                                                                *mut ::std::os::raw::c_char)
                                                           -> u8>,
}
impl ::std::clone::Clone for Struct_VR_IVRRenderModels_FnTable {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VR_IVRRenderModels_FnTable {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VR_IVRNotifications_FnTable {
    pub CreateNotification: ::std::option::Option<unsafe extern "C" fn(ulOverlayHandle:
                                                                           VROverlayHandle_t,
                                                                       ulUserValue:
                                                                           uint64_t,
                                                                       _type:
                                                                           EVRNotificationType,
                                                                       pchText:
                                                                           *mut ::std::os::raw::c_char,
                                                                       style:
                                                                           EVRNotificationStyle,
                                                                       pImage:
                                                                           *mut Struct_NotificationBitmap_t,
                                                                       pNotificationId:
                                                                           *mut VRNotificationId)
                                                      ->
                                                          EVRNotificationError>,
    pub RemoveNotification: ::std::option::Option<extern "C" fn(notificationId:
                                                                    VRNotificationId)
                                                      ->
                                                          EVRNotificationError>,
}
impl ::std::clone::Clone for Struct_VR_IVRNotifications_FnTable {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VR_IVRNotifications_FnTable {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VR_IVRSettings_FnTable {
    pub GetSettingsErrorNameFromEnum: ::std::option::Option<extern "C" fn(eError:
                                                                              EVRSettingsError)
                                                                ->
                                                                    *mut ::std::os::raw::c_char>,
    pub Sync: ::std::option::Option<unsafe extern "C" fn(bForce: u8,
                                                         peError:
                                                             *mut EVRSettingsError)
                                        -> u8>,
    pub GetBool: ::std::option::Option<unsafe extern "C" fn(pchSection:
                                                                *mut ::std::os::raw::c_char,
                                                            pchSettingsKey:
                                                                *mut ::std::os::raw::c_char,
                                                            bDefaultValue: u8,
                                                            peError:
                                                                *mut EVRSettingsError)
                                           -> u8>,
    pub SetBool: ::std::option::Option<unsafe extern "C" fn(pchSection:
                                                                *mut ::std::os::raw::c_char,
                                                            pchSettingsKey:
                                                                *mut ::std::os::raw::c_char,
                                                            bValue: u8,
                                                            peError:
                                                                *mut EVRSettingsError)>,
    pub GetInt32: ::std::option::Option<unsafe extern "C" fn(pchSection:
                                                                 *mut ::std::os::raw::c_char,
                                                             pchSettingsKey:
                                                                 *mut ::std::os::raw::c_char,
                                                             nDefaultValue:
                                                                 int32_t,
                                                             peError:
                                                                 *mut EVRSettingsError)
                                            -> int32_t>,
    pub SetInt32: ::std::option::Option<unsafe extern "C" fn(pchSection:
                                                                 *mut ::std::os::raw::c_char,
                                                             pchSettingsKey:
                                                                 *mut ::std::os::raw::c_char,
                                                             nValue: int32_t,
                                                             peError:
                                                                 *mut EVRSettingsError)>,
    pub GetFloat: ::std::option::Option<unsafe extern "C" fn(pchSection:
                                                                 *mut ::std::os::raw::c_char,
                                                             pchSettingsKey:
                                                                 *mut ::std::os::raw::c_char,
                                                             flDefaultValue:
                                                                 ::std::os::raw::c_float,
                                                             peError:
                                                                 *mut EVRSettingsError)
                                            -> ::std::os::raw::c_float>,
    pub SetFloat: ::std::option::Option<unsafe extern "C" fn(pchSection:
                                                                 *mut ::std::os::raw::c_char,
                                                             pchSettingsKey:
                                                                 *mut ::std::os::raw::c_char,
                                                             flValue:
                                                                 ::std::os::raw::c_float,
                                                             peError:
                                                                 *mut EVRSettingsError)>,
    pub GetString: ::std::option::Option<unsafe extern "C" fn(pchSection:
                                                                  *mut ::std::os::raw::c_char,
                                                              pchSettingsKey:
                                                                  *mut ::std::os::raw::c_char,
                                                              pchValue:
                                                                  *mut ::std::os::raw::c_char,
                                                              unValueLen:
                                                                  uint32_t,
                                                              pchDefaultValue:
                                                                  *mut ::std::os::raw::c_char,
                                                              peError:
                                                                  *mut EVRSettingsError)>,
    pub SetString: ::std::option::Option<unsafe extern "C" fn(pchSection:
                                                                  *mut ::std::os::raw::c_char,
                                                              pchSettingsKey:
                                                                  *mut ::std::os::raw::c_char,
                                                              pchValue:
                                                                  *mut ::std::os::raw::c_char,
                                                              peError:
                                                                  *mut EVRSettingsError)>,
    pub RemoveSection: ::std::option::Option<unsafe extern "C" fn(pchSection:
                                                                      *mut ::std::os::raw::c_char,
                                                                  peError:
                                                                      *mut EVRSettingsError)>,
    pub RemoveKeyInSection: ::std::option::Option<unsafe extern "C" fn(pchSection:
                                                                           *mut ::std::os::raw::c_char,
                                                                       pchSettingsKey:
                                                                           *mut ::std::os::raw::c_char,
                                                                       peError:
                                                                           *mut EVRSettingsError)>,
}
impl ::std::clone::Clone for Struct_VR_IVRSettings_FnTable {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VR_IVRSettings_FnTable {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
extern "C" {
    pub fn VR_InitInternal(peError: *mut EVRInitError,
                           eType: EVRApplicationType) -> intptr_t;
    pub fn VR_ShutdownInternal();
    pub fn VR_IsHmdPresent() -> u8;
    pub fn VR_GetGenericInterface(pchInterfaceVersion:
                                      *const ::std::os::raw::c_char,
                                  peError: *mut EVRInitError) -> intptr_t;
    pub fn VR_IsRuntimeInstalled() -> u8;
    pub fn VR_GetVRInitErrorAsSymbol(error: EVRInitError)
     -> *const ::std::os::raw::c_char;
    pub fn VR_GetVRInitErrorAsEnglishDescription(error: EVRInitError)
     -> *const ::std::os::raw::c_char;
}
